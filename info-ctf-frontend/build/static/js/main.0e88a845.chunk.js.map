{"version":3,"sources":["components/common/Responsive.js","components/common/Header.js","modules/loading.js","lib/createRequestSaga.js","lib/cookie.js","lib/api/client.js","modules/login.js","lib/api/auth.js","components/auth/LoginForm.js","containers/LoginContainer.js","pages/LoginPage.js","modules/register.js","components/common/AskModal.js","components/auth/AskCheckModal.js","components/auth/RegisterForm.js","modules/idcheck.js","modules/sendemail.js","modules/getemail.js","containers/RegisterContainer.js","pages/RegisterPage.js","components/table/RankItem.js","modules/rank.js","lib/api/score.js","containers/RankContainer.js","pages/ScoreBoardPage.js","components/etc/NotificationItem.js","pages/NotificationPage.js","lib/api/quiz.js","modules/showquizlist.js","lib/createRequestSagatwo.js","components/table/ChallengesItem.js","modules/deletequiz.js","lib/api/admin.js","modules/quiz.js","containers/ChallengesContainer.js","pages/ChallengesPage.js","components/auth/LoginAfterForm.js","modules/mypages.js","modules/mypagemodified.js","containers/MypageContainer.js","pages/LoginAfterPage.js","modules/searchuser.js","lib/api/user.js","components/table/UserItem.js","containers/UserContainer.js","pages/UserPage.js","components/Quiz/ShowQuizItem.js","modules/loadquiz.js","modules/deletefile.js","modules/checkanswer.js","containers/LoadQuizContainer.js","pages/ShowQuiz.js","modules/adminregister.js","components/auth/AdminRegisterForm.js","containers/AdminRegisterContainer.js","pages/AdminRegisterPage.js","components/auth/AdminLoginForm.js","pages/AdminLoginPage.js","modules/findpassword.js","components/etc/FindPasswordItem.js","containers/FindPasswordContainer.js","pages/FindPasswordPage.js","modules/makequiz.js","components/Quiz/MakeQuizItem.js","containers/MakeQuizContainer.js","pages/MakeQuizPage.js","App.js","serviceWorker.js","modules/adminlogin.js","modules/uploadfile.js","modules/downloadfile.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","HeaderBlock","Wrapper","Spacer","Header","className","to","style","textDecoration","color","src","alt","marginLeft","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestSaga","type","request","SUCECSS","FAILURE","put","call","response","data","error","setCookie","name","value","exp","date","Date","setTime","getTime","document","cookie","toUTCString","getCookie","match","deleteCookie","client","axios","create","loginpostSaga","LOGOUT","initialize","changeField","key","loginPost","id","password","logout","loginPostSaga","post","logoutSaga","localStorage","removeItem","e","console","log","takeLatest","initialState","login","logged","LoginArea","StyledInput","input","StyledButton","button","LoginForm","onChangeField","onSubmit","onChange","target","placeholder","onClick","withRouter","history","dispatch","useDispatch","useSelector","useCallback","useEffect","token","push","alert","setItem","LoginPageBlock","LoginPage","registerpostSaga","registerPost","nickname","email","team","registerPostSaga","code","register","registerError","FullScreen","AskModalBlock","AskModal","visible","conFirmText","onCancel","onConfirm","borderRadius","border","marginTop","AskCheckModal","RegisterArea","RegisterForm","idCheckSubmit","sendEmailSubmit","getEmailSubmit","useState","modal","setModal","onRemoveClick","onChangeInput","width","fontSize","classNmae","idcheckSaga","ID_CHECK","idinitialize","idCheck","idCheckSaga","get","idcheck","check","sendemailSaga","SEND_EMAIL","sendEmail","sendEmailSaga","sendemail","EmailCheck","getemailSaga","GET_EMAIL","getEmail","getEmailSaga","getemail","GetEmailCheck","location","getemailerror","registererror","preventDefault","includes","RegisterPageBlock","RegisterPage","RankBox","RankRow","ranks","map","rank","RankList","score","RankItem","mydata","fontFamily","ranksaga","RANK","rankGet","rankSaga","headers","setMydata","setRank","users","getItem","admin","contents","MainBlock","ScoreBoardPage","NotificationPageSpanBox","setLogin","NotificationPageBlock","NotificationPage","NotificationItem","showquizlistpostSaga","SHOW_QUIZLIST","showquizlistPost","showquizlistPostSaga","collection","createRequestSagatwo","showquizlist","StyledList","ChallengesDiv","props","ChallengeRow","listStyle","float","d","correct","category","num","point","ChallengesItem","quiz","filterArray","filter","deletequizSaga","DELETE_QUIZ","quizinitialize","deletequizPost","quiz_num","deletequizsaga","delete","deletequiz","quizpostSaga","QUIZ","quizPost","quizPostSaga","quizlist","setQuizList","ChallengesPageBlock","ChallengesArea","ChallengesPage","LoginAfterArea","LoginAfterForm","mypage","onLogout","modifiedid","modifiednickname","modifiedpassword","modifiedemail","modifiedteam","defaultValue","readOnly","mypageSaga","MYPAGE","mypagees","myPageSaga","mypages","myPage","mypagemodifiedSaga","MODIFIED_POST","modifiedPost","mypageModifiedSaga","mypagemodified","setMypage","LoginAfterPageBlock","LoginAfterPage","searchSaga","userSearchPost","search","property","searchsaga","searchuser","UserItemnBox","StyledTable","StyledSelect","select","UserRow","information","info","UserList","UserItem","setInfo","UserPageBlock","UserPageArea","UserPage","ShowQuizitemBox","QuizContent","ShowQuizContent","textarea","ShowQuizItem","loadquiz","flag","onDownload","quiz_code","onCheckAnswer","marginRight","top","left","content","file","position","right","bottom","borderBottom","zIndex","whiteSpace","disabled","loadquizpostSaga","LOAD_QUIZ","loadquizPost","loadquizPostSaga","deletefileSaga","DELETE_FILE","deletefilePost","deleteFileSaga","deletefile","checkanswerSaga","CHECK_ANSWER","checkanswerinitialize","checkanswerPost","checkanswersaga","checkanswer","params","downloadfile","deletequizerror","downloadfileerror","checkanswererror","window","reload","url","fetch","method","responseType","then","blob","URL","createObjectURL","a","createElement","href","setAttribute","click","remove","ShowQuizBlock","ShowQuiz","adminregistersaga","adminRegisterInitialize","adminRegisterChangeField","adminRegisterPost","adminRegisterPostSaga","adminregister","AdminRegisterArea","AdminRegisterForm","getidcheck","setidcheck","adminerror","AdminRegisterPageBlock","AdminRegisterPage","AdminLoginArea","result","status","AdminLoginPageBlock","AdminLoginPage","findpasswordpostSaga","findpasswordPost","findpasswordPostSaga","findpassword","findpasswordError","FindPasswordBox","FindPasswordItem","FindPasswordPageBlock","FindPasswordPage","FindPasswordContainer","makequizpostSaga","makequizPost","quizname","makequizPostSaga","filetoadd","makequiz","MakeQuizArea","MakeQuizContent","InputArea","StyledShortInput","MakeQuizItem","ChangeFile","fileDelete","outline","boxSizing","files","uploadFileData","setUploadFileData","uploadfile","fileAdd","formdata","FormData","append","MakeQuizPageBlock","MakeQuizPage","App","component","path","exact","Boolean","hostname","adminloginpostSaga","adminloginPostSaga","adminlogin","uploadfilepostSaga","uploadfilePostSaga","downloadfilepostSaga","DOWNLOAD_FILE","downloadfilePostsaga","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","user","JSON","parse","loadToken","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0e88a845.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResponsiveBlock = styled.div`\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n    width: 1024px;\r\n    margin: 0 auto; /* 중앙 정렬 */\r\n\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 768px;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst Responsive = ({ children, ...rest }) => {\r\n    // style, className, onClick, onMouse 등의 props를 사용할 수 있도록\r\n    // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n    return (<ResponsiveBlock {...rest}>{children}</ResponsiveBlock>);\r\n};\r\n\r\nexport default Responsive;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport Responsive from './Responsive';\r\n\r\n\r\nconst HeaderBlock = styled.div`\r\n    margin-top: 30px;\r\n    width: 90%;\r\n    z-index: 1;\r\n    \r\n\r\n    li {\r\n        list-style: none;\r\n        float: left;\r\n        font-weight: 300;\r\n        font-family: Noto Sans KR;\r\n        font-style: normal;\r\n        font-size: 26px;\r\n        line-height: 52px;\r\n        color: white;\r\n        margin-top: 20px;\r\n        font-family: 'Do Hyeon', sans-serif;\r\n        color: white;\r\n    }\r\n\r\n    .li:hover {\r\n        cursor: pointer;\r\n        background-color: white;\r\n    }\r\n\r\n    .notice {\r\n        margin-left: -50px;\r\n        color: white;\r\n    }\r\n\r\n    .login {\r\n        margin-right: -50px;\r\n       \r\n    }\r\n`;\r\n\r\n/**\r\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\r\n */\r\nconst Wrapper = styled(Responsive)`\r\nheight: 4rem;\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: space-between; /* 자식 사이의 여백을 최대로 설정 */\r\n\r\n.logo {\r\n    width: 297px;\r\n    height: 156px;\r\n    left: 841px;\r\n    top: 70px;\r\n    margin-top: 140px;\r\n}\r\n\r\nimg {\r\n    width: 100%;\r\n    height: 104%;   \r\n    left: 841px;\r\n    top: 70px;\r\n}\r\n\r\n`;\r\n\r\n/**\r\n * 헤더가 fixed로 되어 있기 때문에 페이지의 콘텐츠가 4rem 아리에 나타나도록 해 주는 컴포넌트\r\n */\r\nconst Spacer = styled.div`\r\nheight: 4rem;\r\n`;\r\n\r\nconst Rectangle = styled.div`\r\nposition: absolute;\r\nwidth: 1300px;\r\nheight: 5px;\r\nleft: 30px;\r\ntop: 10px;\r\n\r\nbackground: linear-gradient(90.16deg, #C189D5 0%, #A5E5F3 100%);\r\nborder-radius: 5px;\r\n`;\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n            <HeaderBlock>\r\n                <Wrapper>\r\n                    <li className=\"notice\">\r\n                        <Link to=\"/notification\" style={{ textDecoration: 'none', color: '#FF89FF' }}  >\r\n                            <span style={{ color: 'linear-gradient(90.16deg, #C189D5 0%, #A5E5F3 100%)' }}>\r\n                                Notifications\r\n                            </span>\r\n                        </Link></li>\r\n                    <li className=\"scoreboard\">\r\n                        <Link to=\"/scoreboard\" style={{ textDecoration: 'none', color: '#FF89FF' }}>\r\n                            ScoreBoard\r\n                    </Link></li>\r\n                    <div className=\"logo\"><Link to=\"/notification\"><img src=\"/images/logo.png\" alt=\"logo\" style={{ textDecoration: 'none', marginLeft: '10px' }} /></Link></div>\r\n                    <li><Link to=\"/challenges\" style={{ textDecoration: 'none', color: '#FF89FF' }}>Challenges</Link></li>\r\n\r\n                    <li className=\"user\"><Link to=\"/user\" style={{ textDecoration: 'none', color: '#FF89FF' }}>User</Link></li>\r\n\r\n                    <li className=\"login\"><Link to=\"/loginafter\" style={{ textDecoration: 'none', color: '#FF89FF' }}>MyPage</Link></li>\r\n                </Wrapper>\r\n            </HeaderBlock>\r\n            <Spacer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n/*\r\n 요청을 위한 액션 타입을 payload로 설정합니다. (예: \"sample/GET_POST\")\r\n */\r\n\r\nexport const startLoading = createAction(\r\n    START_LOADING,\r\n    requestType => requestType,\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n    FINISH_LOADING,\r\n    requestType => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions({\r\n    [START_LOADING]: (state, action) => ({\r\n        ...state,\r\n        [action.payload]: true,\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n        ...state,\r\n        [action.payload]: false,\r\n    }),\r\n},\r\n    initialState,\r\n);\r\n\r\nexport default loading;","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport default function createRequestSaga(type, request) {\r\n    const SUCECSS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n\r\n    return function* (action) {\r\n        yield put(startLoading(type));  // 로딩 시작\r\n        try {\r\n            const response = yield call(request, action.payload);\r\n            yield put({\r\n                type: SUCECSS,\r\n                payload: response.data,\r\n            });\r\n        } catch (e) {\r\n            yield put({\r\n                type: FAILURE,\r\n                payload: e,\r\n                error: true,\r\n            });\r\n        }\r\n        yield put(finishLoading(type)); // 로딩 끝\r\n    };\r\n}","\r\n\r\n// 쿠키 저장하기\r\nvar setCookie = function (name, value, exp) {\r\n    var date = new Date();\r\n    date.setTime(date.getTime() + exp * 24 * 60 * 60 * 1000);\r\n    document.cookie = name + '=' + value + ';expires=' + date.toUTCString() + ';path=/';\r\n};\r\n\r\n// 사용법 : // setCookie(변수이름, 변수값, 기간);\r\n\r\n\r\n// 쿠키 가져오기\r\nvar getCookie = function (name) {\r\n    var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\r\n    return value ? value[2] : null;\r\n};\r\n// 사용법 :  getCookie(변수이름)\r\n// var is_expend = getCookie(\"expend\");\r\n// console.log(\"쿠키 is_expend변수에 저장된 값: \"+is_expend); (테스트용 코드)\r\n\r\n\r\n// 쿠키 삭제하기\r\nvar deleteCookie = function (name) {\r\n    document.cookie = name + '=; expires=Thu, 01 Jan 1999 00:00:10 GMT;';\r\n}\r\n\r\n// 사용법 : deleteCookie('변수이름') ex) deleteCookie('name');\r\n\r\nexport { setCookie, getCookie, deleteCookie };\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n/*\r\n    글로벌 설정 예시:\r\n    // API 주소를 다른 곳으로 사용함\r\n    client.defaults.baseURL = 'https://external-api-server.com/'\r\n\r\n    // 헤더 설정\r\n    client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\r\n\r\n    // 인터셉터 설정\r\n    axios.intercepter.response.use(\\\r\n        response => {\r\n            // 요청 성공 시 특정 작업 수행\r\n            return response;\r\n        },\r\n        error => {\r\n            // 요청 실패 시 특정 작업 수행\r\n            return Promise.reject(error);\r\n        }\r\n    })\r\n*/\r\n\r\nexport default client;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport { deleteCookie } from '../lib/cookie';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'login/CHANGE_FIELD';\r\nconst INITIALIZE = 'login/INITIALIZE';\r\nconst LOGIN_POST = 'login/LOGIN_POST';\r\nconst LOGIN_POST_SUCCESS = 'login/LOGIN_POST_SUCCESS';\r\nconst LOGIN_POST_FAILURE = 'login/LOGIN_POST_FAILURE';\r\nconst LOGOUT = 'login/LOGOUT';\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({ key, value }));\r\nexport const loginPost = createAction(LOGIN_POST, ({ id, password }) => ({ id, password }));\r\nexport const logout = createAction(LOGOUT);\r\n\r\n// 사가 생성\r\nconst loginPostSaga = createRequestSaga(LOGIN_POST, authAPI.login);\r\n\r\nfunction logoutSaga() {\r\n    try {\r\n        localStorage.removeItem('admin'); // localStroage에서 admin을 제거\r\n        localStorage.removeItem('users'); // localStorage에서 users를 제거\r\n        deleteCookie('user');\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport function* loginpostSaga() {\r\n    yield takeLatest(LOGIN_POST, loginPostSaga);\r\n    yield takeLatest(LOGOUT, logoutSaga);\r\n\r\n}\r\n\r\nconst initialState = {\r\n    id: '',\r\n    password: '',\r\n    login: null,\r\n    error: null,\r\n    logged: false,\r\n};\r\n\r\nconst login = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 값을 업데이트\r\n        }),\r\n        // 로그인 성공\r\n        [LOGIN_POST_SUCCESS]: (state, { payload: login }) => ({\r\n            ...state,\r\n            login,\r\n            error: null,\r\n            logged: true,\r\n        }),\r\n        [LOGIN_POST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error: error,\r\n            logged: false,\r\n        }),\r\n        [LOGOUT]: state => ({\r\n            ...state,\r\n            login: null,\r\n            logged: false,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default login;","import client from './client';\r\n\r\n// 아이디 중복 체크\r\nexport const idcheck = ({ id }) => {\r\n    return client.get(`/api/auth/idcheck/${id}`);\r\n}\r\n\r\n// 이메일 인증 보내기\r\nexport const sendemail = ({ id, email }) => {\r\n    return client.post(`/api/auth/emailsend`, { id, email });\r\n}\r\n\r\n// 이메일 인증 받기\r\nexport const getemail = ({ id, code }) => {\r\n    return client.get(`/api/auth/emailcheck?id=${id}&code=${code}`);\r\n}\r\n\r\n// 회원가입\r\nexport const register = ({ id, password, nickname, email, team }) => {\r\n    return client.post(`/api/auth/signup`, { id, password, nickname, email, team });\r\n}\r\n\r\n// 로그인\r\nexport const login = ({ id, password }) => {\r\n    return client.post(`/api/auth/login`, { id, password });\r\n}\r\n\r\n// 비밀번호 찾기\r\nexport const findpassword = ({ id, email }) => {\r\n    return client.post(`/api/auth/findpassword`, { id, email });\r\n}\r\n\r\n// 마이페이지\r\nexport const mypage = ({ token }) => {\r\n    return client.get(`/api/account/`, { headers: { 'Authentication': token } });\r\n}\r\n\r\n// 마이페이지 수정\r\nexport const mypagemodified = ({ id, password, nickname, team, email, token }) => {\r\n    return client.post(`/api/account/change`, { id, password, nickname, email, team }, { headers: { 'Authentication': token } });\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LoginArea = styled.div`\r\n    padding: 2rem;\r\n    width: 600px;\r\n    background: #000000;\r\n    border-radius: 2px;\r\n    height: 700px;\r\n    margin-bottom: 50px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-right: 40px;\r\n    .ButtonArea {\r\n        width: 604.5px;\r\n    }\r\n\r\n    .findpassword {\r\n        font-family: Noto Sans KR;\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 30px;\r\n        line-height: 51px;\r\n        display: flex;\r\n        align-items: center;\r\n        text-align: center;\r\n        color: #5A5A5A;\r\n        margin-right: 350px;\r\n    }\r\n\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 100%;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n\r\n    font-family: 'Do Hyeon', sans-serif;\r\n    color: white;  \r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 600px;\r\n    height: 52px;\r\n    left: 642px;\r\n    top: 420px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    text-align: center;\r\n    color: white;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\nfont-size: 2rem;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 299.5px;\r\nheight: 52px;\r\nleft: 642px;\r\ntop: 420px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\n`;\r\n\r\n\r\n\r\nconst LoginForm = ({ id, password, onChangeField, onSubmit }) => {\r\n\r\n    const onChange = e => {\r\n        const { name } = e.target;\r\n        onChangeField({ key: name, value: e.target.value });\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <LoginArea>\r\n                <StyledInput name=\"id\" placeholder=\"id\" value={id} onChange={onChange} />\r\n                <br />\r\n                <StyledInput name=\"password\" type=\"password\" placeholder=\"password\" value={password} onChange={onChange} />\r\n                <br />\r\n                <div className=\"ButtonArea\">\r\n                    <StyledButton><Link to=\"/register\" style={{ textDecoration: 'none', color: 'white' }}>sign in</Link></StyledButton>\r\n                            &nbsp;\r\n                        <StyledButton onClick={onSubmit}>login</StyledButton>\r\n                </div>\r\n                <span className=\"findpassword\"><Link to=\"/findpassword\" style={{ textDecoration: 'none', color: 'gray' }}>find password</Link></span>\r\n            </LoginArea>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initialize, loginPost } from '../modules/login';\r\nimport LoginForm from '../components/auth/LoginForm';\r\nimport { setCookie, getCookie } from '../lib/cookie';\r\n\r\nconst LoginContainer = ({ history }) => {\r\n    const dispatch = useDispatch();\r\n    const { id, password, login, error } = useSelector(({ login }) => ({\r\n        id: login.id,\r\n        password: login.password,\r\n        login: login.login,\r\n        error: login.error,\r\n    }));\r\n\r\n    // 인풋 값 업데이트\r\n    const onChange = useCallback(payload => dispatch(changeField(payload)), [dispatch]);\r\n\r\n    useEffect(() => {\r\n        const token = getCookie('user');\r\n        if (token) {\r\n            history.push('/notification');\r\n        }\r\n        if (!token) {\r\n            history.push('/');\r\n        }\r\n    }, [history]);\r\n\r\n    // 컴포넌트가 맨 처음 렌더링 될 때 인풋 초기화\r\n    useEffect(() => {\r\n        dispatch(initialize());\r\n    }, [dispatch]);\r\n\r\n    // 컴포넌트가 언마운트될 때 인풋 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize());\r\n        }\r\n    }, [dispatch]);\r\n\r\n    // 로그인 요청\r\n    const onSubmit = e => {\r\n        dispatch(loginPost({ id, password }));\r\n    };\r\n\r\n    // 로그인 성공 여부 확인\r\n    useEffect(() => {\r\n        if (login) {\r\n            if (login) {\r\n                alert(\"로그인 성공\");\r\n                setCookie('user', login.token, 1);\r\n                localStorage.setItem(\"users\", 'users');\r\n                history.push('/notification');    // 공지로 이동\r\n            }\r\n        }\r\n        if (error) {\r\n            if (error) {\r\n                alert(\"로그인 실패\");   // 로그인 실패 처리\r\n                history.push('/');\r\n            }\r\n        }\r\n    }, [history, login, error, dispatch]);\r\n\r\n    return <LoginForm\r\n        onChangeField={onChange}\r\n        onSubmit={onSubmit}\r\n        id={id}\r\n        password={password}\r\n    />;\r\n};\r\n\r\n\r\nexport default withRouter(LoginContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../components/common/Header';\r\nimport LoginContainer from '../containers/LoginContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n\r\n/* 화면 전체를 채움 */\r\nconst LoginPageBlock = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n`;\r\n\r\n\r\nconst LoginPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>로그인 - INFO WARGAME</title>\r\n            </Helmet>\r\n            <LoginPageBlock>\r\n                <Header />\r\n                <LoginContainer />\r\n            </LoginPageBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginPage;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'register/CHANGE_FIELD';\r\nconst INITIALIZE = 'register/INITIALIZE';\r\nconst REGISTER_POST = 'register/REGISTER_POST';\r\nconst REGISTER_POST_SUCCESS = 'register/REGISTER_POST_SUCCESS';\r\nconst REGISTER_POST_FAILURE = 'register/REGISTER_POST_FAILURE';\r\n\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({ key, value, }));\r\nexport const registerPost = createAction(REGISTER_POST, ({ id, password, nickname, email, team }) => ({ id, password, nickname, email, team }));\r\n\r\n// 사가 생성\r\nconst registerPostSaga = createRequestSaga(REGISTER_POST, authAPI.register);\r\n\r\nexport function* registerpostSaga() {\r\n    yield takeLatest(REGISTER_POST, registerPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    id: '',\r\n    password: '',\r\n    nickname: '',\r\n    email: '',\r\n    team: '',\r\n    code: '',\r\n    register: null,\r\n    error: null,\r\n};\r\n\r\nconst register = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 key 값을 업데이트\r\n        }),\r\n        // 회원가입 성공\r\n        [REGISTER_POST_SUCCESS]: (state, { payload: register }) => ({\r\n            ...state,\r\n            registerError: null,\r\n            register,\r\n        }),\r\n        // 회원가입 실패\r\n        [REGISTER_POST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            registerError: error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\n\r\nexport default register;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FullScreen = styled.div`\r\n    position: fixed;\r\n    z-index: 30;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.25);\r\n    display: flex;\r\n    justify-contents: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst AskModalBlock = styled.div`\r\n    width: 520px;\r\n    height: 292px;\r\n    background: #000000;\r\n    padding: 1.5rem;\r\n    border-radius: 4px;\r\n    border: 2px solid #FFFFFF;\r\n    margin-left: 480px;\r\n\r\n    .inputs {\r\n        margin-top: 60px;\r\n        display: flex;\r\n        justify-content: flex-end;\r\n    }\r\n\r\n    .buttons {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n    }\r\n\r\n    font-family: 'Do Hyeon', sans-serif;\r\n    color: white;  \r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 80%;\r\n    height: 52px;\r\n    left: 642px;\r\n    top: 420px;\r\n    background: #000000;\r\n    border-radius: 4px;\r\n    text-align: center;\r\n    color: white;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\nfont-size: 2rem;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 100px;\r\nheight: 52px;\r\nleft: 642px;\r\ntop: 420px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\n`;\r\n\r\nconst AskModal = ({\r\n    visible,\r\n    conFirmText = \"닫기\",\r\n    onConfirm,\r\n    onCancel,\r\n    onChange,\r\n    onClick,\r\n}) => {\r\n    if (!visible) return null;\r\n    return (\r\n        <FullScreen>\r\n            <AskModalBlock>\r\n                <div className=\"inputs\">\r\n                    <StyledInput name=\"code\" style={{ borderRadius: '5px', border: '2px solid #FFFFFF', }} placeholder=\"E-mail Check\" onChange={onChange} />\r\n                    &nbsp;&nbsp;\r\n                    <StyledButton onClick={onClick}>V</StyledButton>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <StyledButton style={{ marginTop: '60px' }} onClick={onCancel}>{conFirmText}</StyledButton>\r\n                </div>\r\n            </AskModalBlock>\r\n        </FullScreen>\r\n    );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\n\r\nconst AskCheckModal = ({ visible, onConfirm, onCancel, onChange, onClick }) => {\r\n\r\n    return (\r\n        <AskModal visible={visible} conFirmText=\"닫기\" onConfirm={onConfirm} onCancel={onCancel} onChange={onChange} onClick={onClick} />\r\n    );\r\n};\r\n\r\nexport default AskCheckModal;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../common/Header';\r\nimport { Link } from 'react-router-dom';\r\nimport AskCheckModal from './AskCheckModal';\r\n\r\n\r\nconst RegisterArea = styled.div`\r\n    padding: 2rem;\r\n    width: 560px;\r\n    background: #000000;\r\n    border-radius: 2px;\r\n    height: 700px;\r\n    margin-top: 100px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-right: 25px;\r\n\r\n    .ButtonArea {\r\n        width: 604.5px;\r\n    }\r\n\r\n    .findpassword {\r\n        font-family: Noto Sans KR;\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 35px;\r\n        line-height: 51px;\r\n        display: flex;\r\n        align-items: center;\r\n        text-align: center;\r\n        color: #5A5A5A;\r\n        margin-right: 346px;\r\n    }\r\n\r\n    .modal {\r\n        width: 400px;\r\n        background: white;x\r\n    }\r\n\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 100%;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n\r\n    font-family: 'Do Hyeon', sans-serif;\r\n    color: white;  \r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 600px;\r\n    height: 52px;\r\n    left: 642px;\r\n    top: 420px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    text-align: center;\r\n    color: white;\r\n  \r\n`;\r\n\r\nconst StyledButton = styled.button`\r\nfont-size: 2rem;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 299.5px;\r\nheight: 52px;\r\nleft: 642px;\r\ntop: 420px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\n`;\r\n\r\n\r\nconst RegisterForm = ({ id, password, nickname, email, team, code, onChangeField, idCheckSubmit, sendEmailSubmit, getEmailSubmit, onSubmit }) => {\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const onClick = () => {\r\n        sendEmailSubmit();\r\n        onRemoveClick();\r\n    }\r\n\r\n    const onRemoveClick = () => {\r\n        setModal(true);\r\n    };\r\n\r\n    const onCancel = () => {\r\n        setModal(false);\r\n    };\r\n\r\n    const onConfirm = () => {\r\n        setModal(false);\r\n    };\r\n\r\n    const onChangeInput = e => {\r\n        const { name } = e.target;\r\n        onChangeField({ key: name, value: e.target.value });\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Header />\r\n            <RegisterArea>\r\n                <StyledInput name=\"id\" placeholder=\"id\" onChange={onChangeInput} value={id} />\r\n                <StyledButton style={{ marginLeft: '720px', marginTop: '-52px', width: '100px', fontSize: '16px' }} onClick={idCheckSubmit}>중복확인</StyledButton>\r\n                <br />\r\n                <StyledInput name=\"password\" type=\"password\" placeholder=\"password\" onChange={onChangeInput} value={password} />\r\n                <br />\r\n                <StyledInput name=\"nickname\" placeholder=\"nickname\" onChange={onChangeInput} value={nickname} />\r\n                <br />\r\n                <StyledInput name=\"email\" placeholder=\"email\" onChange={onChangeInput} value={email} />\r\n                <StyledButton style={{ marginLeft: '720px', marginTop: '-52px', width: '100px', fontSize: '16px' }} onClick={onClick}>이메일확인</StyledButton>\r\n                <StyledInput name=\"team\" placeholder=\"team\" style={{ marginTop: '20px' }} onChange={onChangeInput} value={team} />\r\n                <br />\r\n                <div className=\"ButtonArea\">\r\n                    <StyledButton onClick={onSubmit}>sign in</StyledButton>\r\n                            &nbsp;\r\n                        <StyledButton><Link to=\"/login\" style={{ textDecoration: 'none', color: 'white' }}>login</Link></StyledButton>\r\n                </div>\r\n\r\n                <div className=\"ModalArea\">\r\n                    <AskCheckModal\r\n                        classNmae=\"modal\"\r\n                        visible={modal}\r\n                        onConfirm={onConfirm}\r\n                        onCancel={onCancel}\r\n                        onChange={onChangeInput}\r\n                        onClick={getEmailSubmit} />\r\n                </div>\r\n            </RegisterArea>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst INITIALIZE = 'idcheck/INITIALIZE';\r\nconst ID_CHECK = 'idcheck/ID_CHECK';\r\nconst ID_CHECK_SUCCESS = 'idcheck/ID_CHECK_SUCCESS';\r\nconst ID_CHECK_FAILURE = 'idcheck/ID_CHECK_FAILURE';\r\nconst ID_UNLOAD = 'idcheck/ID_UNLOAD';\r\n\r\n\r\nexport const idinitialize = createAction(INITIALIZE);\r\nexport const idCheck = createAction(ID_CHECK, ({ id }) => ({ id }));\r\nexport const idUnload = createAction(ID_UNLOAD);\r\n\r\nconst idCheckSaga = createRequestSaga(ID_CHECK, authAPI.idcheck);\r\nexport function* idcheckSaga() {\r\n    yield takeLatest(ID_CHECK, idCheckSaga);\r\n}\r\n\r\nconst initialState = {\r\n    idcheck: null,\r\n    error: null,\r\n};\r\n\r\nconst idcheck = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [ID_CHECK_SUCCESS]: (state, { payload: idcheck }) => ({\r\n            ...state,\r\n            idcheck,\r\n        }),\r\n        [ID_CHECK_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n            check: false,\r\n        }),\r\n        [ID_UNLOAD]: () => initialState,\r\n    },\r\n    initialState,\r\n);\r\n\r\n\r\nexport default idcheck; ","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst SEND_EMAIL = 'sendemail/SEND_EMAIL';\r\nconst SEND_EMAIL_SUCCESS = 'sendemail/SEND_EMAIL_SUCCESS';\r\nconst SEND_EMAIL_FAILURE = 'sendemail/SEMD_EMAIL_FAILURE';\r\nconst SEND_EMAIL_UNLOAD = \"sendemail/SEND_EMAIL_UNLOAD\";\r\n\r\nexport const sendEmail = createAction(SEND_EMAIL, ({ id, email }) => ({\r\n    id,\r\n    email\r\n}));\r\nexport const sendEmailUnload = createAction(SEND_EMAIL_UNLOAD);\r\n\r\n// 사가 생성\r\nconst sendEmailSaga = createRequestSaga(SEND_EMAIL, authAPI.sendemail);\r\nexport function* sendemailSaga() {\r\n    yield takeLatest(SEND_EMAIL, sendEmailSaga);\r\n}\r\n\r\nconst initialState = {\r\n    sendemail: null,\r\n    error: null,\r\n    EmailCheck: null,\r\n};\r\n\r\nconst sendemail = handleActions(\r\n    {\r\n        [SEND_EMAIL_SUCCESS]: (state, { payload: sendemail }) => ({\r\n            ...state,\r\n            sendemail,\r\n            EmailCheck: true,\r\n        }),\r\n        [SEND_EMAIL_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n            EmailCheck: false,\r\n        }),\r\n        [SEND_EMAIL_UNLOAD]: () => initialState,\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default sendemail;","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst GET_EMAIL = 'getemail/GET_EMAIL';\r\nconst GET_EMAIL_SUCCESS = 'getemail/GET_EMAIL_SUCCESS';\r\nconst GET_EMAIL_FAILURE = 'getemail/GET_EMAIL_FAILURE';\r\n\r\nexport const getEmail = createAction(GET_EMAIL, ({ id, code }) => ({\r\n    id,\r\n    code,\r\n}));\r\n\r\nconst getEmailSaga = createRequestSaga(GET_EMAIL, authAPI.getemail);\r\n\r\nexport function* getemailSaga() {\r\n    yield takeLatest(GET_EMAIL, getEmailSaga);\r\n}\r\n\r\nconst initialState = {\r\n    getemail: null,\r\n    error: null,\r\n    GetEmailCheck: null,\r\n};\r\n\r\nconst getemail = handleActions(\r\n    {\r\n        [GET_EMAIL_SUCCESS]: (state, { payload: getemail }) => ({\r\n            ...state,\r\n            getemail,\r\n            GetEmailCheck: true,\r\n        }),\r\n        [GET_EMAIL_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n            GetEmailCheck: false,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default getemail;","import React, { useEffect, useCallback } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initialize, registerPost } from '../modules/register';\r\nimport RegisterForm from '../components/auth/RegisterForm';\r\nimport { idCheck, idinitialize } from '../modules/idcheck';\r\nimport { sendEmail } from '../modules/sendemail';\r\nimport { getEmail } from '../modules/getemail';\r\n\r\nconst RegisterContainer = ({ location, history }) => {\r\n    const dispatch = useDispatch();\r\n    const { id, password, nickname, email, team, code, GetEmailCheck, getemailerror, register, registererror, idcheck, error, getemail } = useSelector(({ register, idcheck, getemail }) => ({\r\n        id: register.id,\r\n        password: register.password,\r\n        nickname: register.nickname,\r\n        email: register.email,\r\n        team: register.team,\r\n        code: register.code,\r\n        register: register.register,\r\n        registerError: register.registerError,\r\n        idcheck: idcheck.idcheck,\r\n        GetEmailCheck: getemail.GetEmailCheck,\r\n        getemail: getemail.getemail,\r\n        error: idcheck.error,\r\n        getemailerror: getemail.error,\r\n        registererror: register.error,\r\n\r\n    }));\r\n\r\n\r\n    // 아이디 중복 체크\r\n    const idCheckSubmit = () => {\r\n        idinitialize();\r\n        dispatch(idCheck({ id }));\r\n    };\r\n\r\n    // 이메일 인증 보내기\r\n    const sendEmailSubmit = () => {\r\n        dispatch(sendEmail({ id, email }));\r\n    };\r\n\r\n    // 이메일 인증 받기\r\n    const getEmailSubmit = () => {\r\n        dispatch(getEmail({ id, code }));\r\n    };\r\n    // 회원가입\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        if (GetEmailCheck === true) {\r\n            dispatch(registerPost({ id, password, nickname, email, team }));\r\n        }\r\n        if ([id, password, nickname, email, team].includes('')) {\r\n            alert('빈 칸을 모두 입력하세요.');\r\n        }\r\n        else {\r\n            alert(\"이메일 인증이 완료되지 않았습니다.\");\r\n        }\r\n    };\r\n    // 인풋 값 변경\r\n    const onChangeField = useCallback(payload => dispatch(changeField(payload)), [dispatch]);\r\n\r\n    // 컴포넌트가 맨 처음 렌더링 될 때 인풋 초기화\r\n    useEffect(() => {\r\n        idinitialize();\r\n        dispatch(initialize());\r\n    }, [dispatch]);\r\n\r\n    // 언마운트 될 때 인풋 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize());\r\n        }\r\n    }, [dispatch]);\r\n\r\n\r\n    // ID 중복 체크 성공여부 확인\r\n    useEffect(() => {\r\n        if (idcheck) {\r\n            alert('아이디가 사용 가능합니다.');\r\n            dispatch(idinitialize());\r\n        }\r\n        if (error) {\r\n            alert(\"아이디가 사용 불가능합니다.\");\r\n            dispatch(idinitialize());\r\n        }\r\n    }, [idcheck, error, dispatch]);\r\n\r\n    // 이메일 인증 보내기 성공여부 확인\r\n    useEffect(() => {\r\n        if (getemail) {\r\n            alert(\"이메일 인증 완료\");\r\n        }\r\n        if (getemailerror) {\r\n            alert(\"이미 있는 이메일입니다\");\r\n        }\r\n    }, [getemail, getemailerror, dispatch]);\r\n\r\n    // 회원가입 성공여부 확인\r\n    useEffect(() => {\r\n        if (register) {\r\n            alert(\"회원가입이 완료되었습니다!\");\r\n            history.push('/');\r\n        }\r\n        if (registererror) {\r\n            alert(\"회원가입 실패\");\r\n        }\r\n    }, [register, registererror, history]);\r\n\r\n\r\n    return <RegisterForm\r\n        onChangeField={onChangeField}\r\n        idCheckSubmit={idCheckSubmit}\r\n        sendEmailSubmit={sendEmailSubmit}\r\n        getEmailSubmit={getEmailSubmit}\r\n        onSubmit={onSubmit}\r\n        id={id}\r\n        password={password}\r\n        nickname={nickname}\r\n        email={email}\r\n        team={team}\r\n        code={code}\r\n    />;\r\n};\r\n\r\n\r\nexport default withRouter(RegisterContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport RegisterContainer from '../containers/RegisterContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n/* 화면 전체를 채움 */\r\nconst RegisterPageBlock = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n`;\r\n\r\nconst RegisterPage = () => {\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>회원가입 - INFO WARGAME</title>\r\n            </Helmet>\r\n            <RegisterPageBlock>\r\n                <RegisterContainer />\r\n            </RegisterPageBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RegisterPage;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst RankBox = styled.div`\r\nwidth: 80%;\r\nheight: 100%;\r\nbackground: #000000;\r\n\r\n\r\ntable {\r\n    width: 100%;\r\n    font-size: 24px;\r\n    text-align: center;\r\n    margin-top: 100px;\r\n}\r\n\r\nfont-family: 'Do Hyeon', sans-serif;\r\ncolor: white;\r\n`;\r\n\r\n\r\n\r\n\r\nconst RankItem = ({ ranks, mydata, loading }) => {\r\n\r\n    if (loading) {\r\n        return (\r\n            <RankBox>\r\n            <h1 style={{ fontFamily: 'Do Hyeon', color: 'white', marginLeft: '500px',marginTop: '250px'}}>랭킹 로딩 중 입니다.</h1>\r\n            </RankBox>\r\n        );\r\n}\r\n\r\n    return (\r\n        <>\r\n            <RankBox>\r\n                <table>\r\n                    <colgroup>\r\n                        <col width=\"18%\" />\r\n                        <col width=\"20%\" />\r\n                        <col width=\"20%\" />\r\n                    </colgroup>\r\n                    <RankRow ranks={ranks} />\r\n                </table>\r\n            </RankBox>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n// 검색결과로 리턴된 배열을 반복해서 보여주는 부분\r\nconst RankRow = ({ ranks }) => {\r\n\r\n    // rank 값이 유효할 때 (렌더링 오류가 나지 않게 객체든 배열이든 꼭 이 유효성 검사를 해주어야 함)\r\n    if (ranks === null) {\r\n        return (\r\n            <RankBox>\r\n            <h1 style={{ color: 'white', marginLeft: '220px', marginTop: '200px' }}>랭킹이 존재하지 않습니다. <br /> 로그인해야 랭킹이 보입니다.</h1>\r\n            </RankBox>\r\n        );\r\n    }\r\n\r\n    if (!ranks) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <thead>\r\n                <tr>\r\n                    <th>-rank-</th>\r\n                    <th>-name-</th>\r\n                    <th>-score-</th>\r\n                </tr>\r\n            </thead>\r\n            {ranks.map(rank => {\r\n                return (\r\n                    <>\r\n                        <RankList key={rank.rank} ranks={rank} />\r\n                    </>\r\n                )\r\n            })}\r\n        </>\r\n    );\r\n}\r\n\r\n// 검색결과 리턴된 배열의 내용을 보여주는 부분\r\nconst RankList = ({ ranks }) => {\r\n    const { name, score, rank } = ranks;\r\n    return (\r\n        <>\r\n\r\n            <tbody>\r\n                <tr>\r\n                    <td>{rank}</td>\r\n                    <td>{name}</td>\r\n                    <td>{score}</td>\r\n                </tr>\r\n            </tbody>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RankItem;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as scoreAPI from '../lib/api/score';\r\n\r\nconst RANK = 'rank/RANK';\r\nconst RANK_SUCCESS = 'rank/RANK_SUCCESS';\r\nconst RANK_FAILURE = 'rank/RANK_FAILURE';\r\n\r\nexport const rankGet = createAction(RANK, ({ token }) => ({ token }));\r\n\r\nconst rankSaga = createRequestSaga(RANK, scoreAPI.showrank);\r\n\r\nexport function* ranksaga() {\r\n    yield takeLatest(RANK, rankSaga);\r\n}\r\n\r\nconst initialState = {\r\n    ranks: null,\r\n    error: null,\r\n};\r\n\r\nconst rank = handleActions(\r\n    {\r\n        [RANK_SUCCESS]: (state, { payload: ranks }) => ({\r\n            ...state,\r\n            ranks,\r\n        }),\r\n        [RANK_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default rank;","import client from './client';\r\n\r\n// TOP 50 유저 불러오기\r\nexport const showrank = ({ token }) => {\r\n    return client.get(`/api/account/rank`, { headers: { 'Authentication': token } });\r\n}","import React, { useEffect, useState } from 'react';\r\nimport RankItem from '../components/table/RankItem';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { rankGet } from '../modules/rank';\r\nimport { getCookie } from '../lib/cookie';\r\n\r\n\r\nconst RankContainer = ({ history }) => {\r\n    const dispatch = useDispatch();\r\n    const [mydata, setMydata] = useState(null);\r\n    const [rank, setRank] = useState(null);\r\n    const { ranks, error, loading } = useSelector(({ rank, loading }) => ({\r\n        ranks: rank.ranks,\r\n        error: rank.error,\r\n        loading: loading['rank/RANK'],\r\n    }));\r\n\r\n    // 페이지가 마운트(처음 보여질 때)될 때 순위 api 요청\r\n    useEffect(() => {\r\n        const token = getCookie(\"user\");\r\n        const users = localStorage.getItem(\"users\") ? localStorage.getItem('users') : null;\r\n        const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n        if (users) {\r\n            dispatch(rankGet({ token }));\r\n        }\r\n        if (admin) {\r\n            dispatch(rankGet({ token }));\r\n        }\r\n    }, [dispatch, history]);\r\n\r\n    useEffect(() => {\r\n        if (ranks) {\r\n            if (ranks) {\r\n                setMydata(ranks.mydata);\r\n                setRank(ranks.contents);\r\n            }\r\n            if (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }, [ranks, rank, mydata, error]);\r\n\r\n    return <RankItem mydata={mydata} ranks={rank} loading={loading} />;\r\n};\r\n\r\n\r\nexport default withRouter(RankContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../components/common/Header';\r\nimport RankContainer from '../containers/RankContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n\r\nconst MainBlock = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nheight: 500%;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\noverflow: auto;\r\n\r\n/* 브라우저 크기에 따라 가로 크기 변경 */\r\n@media (max-width: 1024px) {\r\n    width: 100%;\r\n}\r\n@media (max-width: 768px) {\r\n    width: 100%;\r\n}\r\n`;\r\n\r\n\r\n\r\nconst ScoreBoardPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>랭킹 - INFO WARGAME</title>\r\n            </Helmet>\r\n            <MainBlock>\r\n                <Header />\r\n                <RankContainer />\r\n            </MainBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ScoreBoardPage;\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { logout } from '../../modules/login';\r\nimport { Link } from 'react-router-dom';\r\nimport { getCookie, deleteCookie } from '../../lib/cookie';\r\n\r\nconst NotificationPageSpanBox = styled.div`\r\nwidth: 80%;\r\nmargin-left: -10px;\r\nheight: 100%;\r\nmargin-bottom: -0px;\r\nbackground: #00000;\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n\r\nspan {\r\n    font-size: 50px;\r\n    color: white;\r\n    margin-top: 25px;\r\n}\r\n\r\nfont-family: 'Do Hyeon', sans-serif;\r\ncolor: white;  \r\n`;\r\n\r\nconst StyledButton = styled.button`\r\nposition: absolute;\r\nmargin-top: -300px;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 76px;\r\nheight: 52px;\r\nleft: 1330px;\r\ntop: 354px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\nfont-size: 15px;\r\ncursor: pointer;\r\nz-index: 0;\r\n`;\r\n\r\nconst NotificationPage = ({ data, history, location }) => {\r\n\r\n    const [login, setLogin] = useState(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n        deleteCookie('user');\r\n        alert(\"로그아웃 성공\");\r\n        window.location.reload();\r\n    };\r\n\r\n    useEffect(() => {\r\n        const token = getCookie(\"user\");\r\n        if (token === null) {\r\n            setLogin(false);\r\n        }\r\n        if (token) {\r\n            setLogin(true);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <NotificationPageSpanBox>\r\n            <span>INFO CTF에 오신 것을 환영합니다!</span>\r\n            <span style={{ fontSize: '40px' }}>-사이트를 이용하기 전 유의해야 할 사항-</span>\r\n            <span style={{ fontSize: '24px' }}>* 여러분이 서버를 가지고 놀면 서버가 아야해요 ㅠㅠ</span>\r\n            <span style={{ fontSize: '24px' }}>* 로그아웃은 MyPage에서 해야 합니다!</span>\r\n            <span style={{ fontSize: '24px' }}>* 사이트를 해하려고 하는 행위는 절.대.로 하지말아주세요.</span>\r\n            <span style={{ fontSize: '24px' }}>* ex) 해킹, 디도스 공격 등등...</span>\r\n            <span style={{ fontSize: '14px', color: 'black' }}>사이트 개발자: 전세훈, 김호준</span>\r\n        </NotificationPageSpanBox>\r\n    );\r\n};\r\n\r\n//  {login ? <StyledButton onClick={onLogout}>로그아웃</StyledButton> : <Link to=\"login\"><StyledButton style={{ textDecoration: 'none', zIndex: 0 }}>로그인</StyledButton></Link>}\r\n\r\nexport default withRouter(NotificationPage);\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../components/common/Header';\r\nimport NotificationItem from '../components/etc/NotificationItem';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n/* 화면 전체를 채움 */\r\nconst NotificationPageBlock = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\noverflow: auto;\r\n`;\r\n\r\n\r\n\r\nconst NotificationPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>INFO WARGAME</title>\r\n            </Helmet>\r\n            <NotificationPageBlock>\r\n                <Header />\r\n                <NotificationItem />\r\n            </NotificationPageBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NotificationPage;\r\n","import client from './client';\r\n\r\n// 문제 목록 불러오기\r\nexport const showquizlist = ({ token }) => {\r\n    return client.get(`/api/challenge/page`, { headers: { \"Authentication\": token } });\r\n}\r\n\r\n// 문제 내용 불러오기\r\nexport const loadquiz = quiz_code => client.get(`/api/challenge/${quiz_code}`);\r\n\r\n// 문제 파일 다운로드\r\nexport const downloadfile = quiz_code => client.get(`/api/challenge/download/${quiz_code}`, { headers: { responseType: 'blob' } });\r\n\r\n// 문제 정답 체크\r\nexport const checkanswer = ({ quiz_code, flag, token }) => client.post(`/api/challenge/answer/${quiz_code}`, { flag }, { headers: { \"Authentication\": token } });\r\n\r\n// 맞춘 문제 확인하기\r\nexport const checkquiz = ({ token }) => client.get(`/api/challenge`, { headers: { \"Authentication\": token } })","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSagatwo from '../lib/createRequestSagatwo';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as quizAPI from '../lib/api/quiz';\r\n\r\nconst SHOW_QUIZLIST = 'showquizlist/SHOW_QUIZLIST';\r\nconst SHOW_QUIZLIST_SUCCESS = 'showquizlist/SHOW_QUIZLIST_SUCCESS';\r\nconst SHOW_QUIZLIST_FAILURE = 'showquizlist/SHOW_QUIZLIST_FAILURE';\r\n\r\nexport const showquizlistPost = createAction(SHOW_QUIZLIST);\r\n\r\n// 사가 생성\r\nconst showquizlistPostSaga = createRequestSagatwo(SHOW_QUIZLIST, quizAPI.showquizlist);\r\n\r\nexport function* showquizlistpostSaga() {\r\n    yield takeLatest(SHOW_QUIZLIST, showquizlistPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    showquizlist: [],\r\n    error: null,\r\n};\r\n\r\nconst showquizlist = handleActions(\r\n    {\r\n        [SHOW_QUIZLIST_SUCCESS]: (state, { payload: showquizlist }) => ({\r\n            ...state,\r\n            showquizlist,\r\n        }),\r\n        [SHOW_QUIZLIST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default showquizlist;","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport default function createRequestSaga(type, request) {\r\n    const SUCECSS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n\r\n    return function* (action) {\r\n        yield put(startLoading(type));  // 로딩 시작\r\n        try {\r\n            const response = yield call(request, action.payload);\r\n            yield put({\r\n                type: SUCECSS,\r\n                payload: response.data.collection,\r\n            });\r\n        } catch (e) {\r\n            yield put({\r\n                type: FAILURE,\r\n                payload: e,\r\n                error: true,\r\n            });\r\n        }\r\n        yield put(finishLoading(type)); // 로딩 끝\r\n    };\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst StyledList = styled.div`\r\nposition: relative;\r\nfont-size: 2rem;\r\nbackground: #000000;\r\nbox-sizing: border-box;\r\nwidth: 100%;\r\nheight: 100%;\r\nleft: 0px;\r\nborder: none;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\nleft: -15px;\r\nmargin-top: -0px;\r\n\r\n\r\nul {\r\n    display:flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n}\r\n\r\nul li{\r\n    list-style-type: none;\r\n    margin-left: 20px;\r\n}\r\n\r\np {\r\n    font-size: 21px;\r\n    text-align: center;\r\n    color: white;\r\n    font-family: 'Black Han Sans', sans-serif;\r\n}\r\n\r\n#subject {\r\n    margin-bottom:  5px;\r\n    font-size: 20px;\r\n    margin-right: 990px;\r\n    font-family: 'Black Han Sans', sans-serif;\r\n    color: white;\r\n}\r\n\r\n`;\r\n\r\n\r\nconst ChallengesDiv = styled.div`\r\n    width: 140px;\r\n    height: 100px;\r\n    padding: 13px;\r\n    box-sizing: border-box;\r\n    background: #F0F8FF;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background: #C1FF8F;\r\n    }\r\n    p {\r\n        color: black;\r\n\r\n    }\r\n    font-family: 'Do Hyeon', sans-serif;\r\n    color: white;\r\n    \r\n    background-color: ${props => props.color || \"#F0F8FF\"};\r\n`;\r\n\r\n\r\nconst ChallengesItem = ({ data, quiz, loading }) => {\r\n\r\n    if (loading) {\r\n        return <StyledList><h3 style={{ textDecoration: 'none', color: 'white' }}>문제목록 로딩 중 입니다.</h3></StyledList>\r\n    }\r\n\r\n    if (data === null) {\r\n        return <StyledList><h1 style={{ textDecoration: 'none', color: 'white' }}>문제목록 로딩실패</h1></StyledList>\r\n    }\r\n\r\n    if (!data) {\r\n        console.log(\"error\");\r\n        return null;\r\n    }\r\n\r\n    const filterArray = (category) => {\r\n        return data.filter(data => data.category === category);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <StyledList>\r\n                <p style={{ fontSize: '18px', color: 'white' }}>*유의사항* : 한번 푼 문제는 다시 풀 수 없습니다. </p>\r\n                <p>Cryptography</p><ChallengeRow key={filterArray(1).num} data={filterArray(1)}></ChallengeRow>\r\n                <br />\r\n                <p>Forensics</p><ChallengeRow data={filterArray(2)}></ChallengeRow>\r\n                <br />\r\n                <p>MISC </p><ChallengeRow data={filterArray(3)}></ChallengeRow>\r\n                <br />\r\n                <p>Networking </p><ChallengeRow data={filterArray(4)}></ChallengeRow>\r\n                <br />\r\n                <p>Pwnable</p><ChallengeRow data={filterArray(5)}></ChallengeRow>\r\n                <br />\r\n                <p>Reverse Engineering</p><ChallengeRow data={filterArray(6)}></ChallengeRow>\r\n                <br />\r\n                <p>Webhacking</p><ChallengeRow data={filterArray(7)}></ChallengeRow>\r\n            </StyledList>\r\n        </>\r\n    );\r\n};\r\n\r\nconst ChallengeRow = ({ data }) => {\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <ul style={{ listStyle: 'none', float: 'left' }}>\r\n                    {\r\n                        data.map(d => {\r\n                            if (d.correct === 1)\r\n                                return (\r\n                                    <>\r\n                                        <li><ChallengesDiv color=\"#C1FF8F\"><Link to={`/quiz/${d.category}/${d.num}`}><p style={{ fontSize: '18px' }}>{d.name}<br />{d.point}<br />문제 번호: {d.num}</p></Link></ChallengesDiv><br /></li>\r\n                                    </>\r\n\r\n                                )\r\n                            else\r\n                                return (\r\n                                    <>\r\n                                        <li><ChallengesDiv><Link to={`/quiz/${d.category}/${d.num}`}><p style={{ fontSize: '18px' }}>{d.name}<br />{d.point}<br />문제 번호: {d.num}</p></Link></ChallengesDiv><br /></li>\r\n                                    </>\r\n\r\n                                )\r\n                        })\r\n                    }\r\n                </ul>\r\n                <br />\r\n                <br />\r\n                <br />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default ChallengesItem;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as adminAPI from '../lib/api/admin';\r\n\r\nconst INITIALIZE = 'deletequiz/INITIALIZE';\r\nconst DELETE_QUIZ = 'deletequiz/DELETE_QUIZ';\r\nconst DELETE_QUIZ_SUCCESS = 'deletequiz/DELETE_QUIZ_SUCCESS';\r\nconst DELETE_QUIZ_FAILURE = 'deletequiz/DELETE_QUIZ_FAILURE';\r\n\r\nexport const quizinitialize = createAction(INITIALIZE);\r\nexport const deletequizPost = createAction(DELETE_QUIZ, ({ quiz_num, token }) => ({ quiz_num, token }));\r\n\r\nconst deletequizsaga = createRequestSaga(DELETE_QUIZ, adminAPI.deletequiz);\r\n\r\n// 사가 생성\r\nexport function* deletequizSaga() {\r\n    yield takeLatest(DELETE_QUIZ, deletequizsaga);\r\n}\r\n\r\nconst initialState = {\r\n    deletequiz: null,\r\n    error: null,\r\n};\r\n\r\nconst deletequiz = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [DELETE_QUIZ_SUCCESS]: (state, { payload: deletequiz }) => ({\r\n            ...state,\r\n            deletequiz,\r\n        }),\r\n        [DELETE_QUIZ_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default deletequiz; ","import client from './client';\r\n\r\n// admin 회원가입\r\nexport const adminregister = ({ id, password, nickname, code }) => {\r\n    return client.post(`api/admin/signup`, { id, password, nickname, code });\r\n}\r\n\r\n// admin 로그인\r\nexport const adminlogin = ({ id, password }) => {\r\n    return client.post(`api/admin/login`, { id, password });\r\n}\r\n\r\n// 문제 만들기 \r\nexport const makequiz = ({ category, contents, point, quizname, flag, token }) => {\r\n    return client.post(`/api/admin/challenge/make`, { category, contents, point, quizname, flag }, { headers: { \"Authentication\": token } });\r\n}\r\n\r\n// 파일 업로드 (사용 x container 컴포넌트에서 요청함)\r\nexport const uploadfile = ({ quizname, file, token }) => {\r\n    return client.post(`api/admin/fileadd/${quizname}`, { filetoadd: file }, { headers: { \"Authentication\": token } });\r\n}\r\n\r\n// 파일 삭제\r\nexport const deletefile = ({ quiz_num, token }) => {\r\n    return client.delete(`/api/admin/file/${quiz_num}`, { headers: { 'Authentication': token } });\r\n}\r\n\r\n// 퀴즈 삭제\r\nexport const deletequiz = ({ quiz_num, token }) => {\r\n    return client.delete(`/api/admin/challenge/${quiz_num}`, { headers: { 'Authentication': token } });\r\n}","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as quizAPI from '../lib/api/quiz';\r\n\r\nconst INITIALIZE = 'quiz/INITIALIZE';\r\nconst QUIZ = 'quiz/QUIZ';\r\nconst QUIZ_SUCCESS = 'quiz/QUIZ_SUCCESS';\r\nconst QUIZ_FAILURE = 'quiz/QUIZ_FAILURE';\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const quizPost = createAction(QUIZ, token => token);\r\n\r\n// 사가 생성\r\nconst quizPostSaga = createRequestSaga(QUIZ, quizAPI.checkquiz);\r\n\r\n// 사가 통합\r\nexport function* quizpostSaga() {\r\n    yield takeLatest(QUIZ, quizPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    quiz: null,\r\n    error: null,\r\n};\r\n\r\nconst quiz = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n\r\n        [QUIZ_SUCCESS]: (state, { payload: quiz }) => ({\r\n            ...state,\r\n            quiz,\r\n        }),\r\n        [QUIZ_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default quiz;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { showquizlistPost } from '../modules/showquizlist';\r\nimport ChallengesItem from '../components/table/ChallengesItem';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { quizinitialize } from '../modules/deletequiz';\r\nimport { initialize, quizPost } from '../modules/quiz';\r\nimport { getCookie } from '../lib/cookie';\r\n\r\nconst ChallengesContainer = ({ history }) => {\r\n    const [quizlist, setQuizList] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const { showquizlist, quiz, loading } = useSelector(({ showquizlist, quiz, loading }) => ({\r\n        showquizlist: showquizlist.showquizlist,\r\n        quiz: quiz.quiz,\r\n        loading: loading['showquizlist/SHOW_QUIZLIST'],\r\n    }));\r\n\r\n    // 페이지가 mount 될 때 문제목록 api 호출\r\n    useEffect(() => {\r\n        const users = localStorage.getItem(\"users\") ? localStorage.getItem('users') : null;\r\n        const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n        const token = getCookie(\"user\");\r\n        if (users) {\r\n            dispatch(showquizlistPost({ token }));\r\n            dispatch(quizPost({ token }));\r\n        }\r\n        if (admin) {\r\n            dispatch(showquizlistPost({ token }));\r\n            dispatch(quizPost({ token }));\r\n        }\r\n        if (!token) {\r\n            alert(\"로그인해야 사용가능한 기능입니다.\");\r\n            history.push(\"/\");\r\n        }\r\n        return () => {\r\n            dispatch(quizinitialize());\r\n            initialize();\r\n        }\r\n    }, [dispatch, history]);\r\n\r\n    useEffect(() => {\r\n        if (quiz) {\r\n            setQuizList(quiz.contents);\r\n        }\r\n    }, [quizlist, quiz]);\r\n\r\n    return <ChallengesItem data={showquizlist} quiz={quizlist} loading={loading} />;\r\n};\r\n\r\nexport default withRouter(ChallengesContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../components/common/Header';\r\nimport ChallengesContainer from '../containers/ChallengesContainer';\r\nimport { Link } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n/* 화면 전체를 채움 */\r\nconst ChallengesPageBlock = styled.div`\r\nwidth: 100%;\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\noverflow: auto;\r\n`;\r\n\r\nconst HeaderBlock = styled.div`\r\nwidth: 80%;\r\nbackground: black;\r\nposition: absolute;\r\nleft: 210px;\r\ntop: 20px;\r\n`;\r\n\r\nconst ChallengesArea = styled.div`\r\nposition: absolute;\r\nwidth: 90%;\r\nheight: 2520px; \r\nbackground: #000000;\r\nbottom: 240px;\r\ntop: 300px;\r\noverflow: auto;\r\n\r\n\r\n/* 브라우저 크기에 따라 가로 크기 변경 */\r\n@media (max-width: 1024px) {\r\n    width: 100%;\r\n}\r\n@media (max-width: 768px) {\r\n    width: 100%;\r\n}\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\nposition: relative;\r\nfont-size: 1rem;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 109.5px;\r\nheight: 51px;\r\nleft: 1200px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: grey;\r\ncursor: pointer;\r\ncolor: white;\r\ntext-decoration: none;\r\np {\r\n    color: white;\r\n    margin-top: 10px;\r\n}\r\n`;\r\n\r\n\r\nconst ChallengesPage = () => {\r\n\r\n    const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>퀴즈목록 - INFO WARGAME</title>\r\n            </Helmet>\r\n\r\n            <ChallengesPageBlock>\r\n                <HeaderBlock>\r\n                    <Header />\r\n                </HeaderBlock>\r\n                <ChallengesArea>\r\n                    {admin ? <StyledButton><Link to=\"/makequiz\"><p>문제 만들기</p></Link></StyledButton> : null}\r\n                    <ChallengesContainer />\r\n                </ChallengesArea>\r\n            </ChallengesPageBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChallengesPage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst LoginAfterArea = styled.div`\r\n    padding: 2rem;\r\n    width: 560px;\r\n    background: black;\r\n    border-radius: 2px;\r\n    height: 500px;\r\n    margin-top: 150px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-right: 25px;\r\n\r\n    .ButtonArea {\r\n        width: 604.5px;\r\n    }\r\n\r\n    .findpassword {\r\n        font-family: Noto Sans KR;\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 35px;\r\n        line-height: 51px;\r\n        display: flex;\r\n        align-items: center;\r\n        text-align: center;\r\n        color: #5A5A5A;\r\n        margin-right: 346px;\r\n    }\r\n\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 100%;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n\r\n    font-family: 'Do Hyeon', sans-serif;\r\n    color: white;  \r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 600px;\r\n    height: 52px;\r\n    left: 642px;\r\n    top: 420px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    text-align: center;\r\n    color: white;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\nfont-size: 2rem;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 299.5px;\r\nheight: 52px;\r\nleft: 642px;\r\ntop: 420px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\n`;\r\n\r\n\r\nconst LoginAfterForm = ({ loading, mypage, onLogout, onChangeField, onSubmit, modifiedid, modifiedpassword, modifiednickname, modifiedemail, modifiedteam }) => {\r\n\r\n    if (loading) {\r\n        return <LoginAfterArea><h1 style={{ textDecoration: 'none', color: 'white' }}>로딩 중 입니다.</h1></LoginAfterArea>\r\n    }\r\n\r\n    if (mypage === null) {\r\n        return <LoginAfterArea><h1 style={{ textDecoration: 'none', color: 'white' }}>존재하지 않는 계정정보입니다.</h1></LoginAfterArea>\r\n    }\r\n\r\n    if (!mypage) {\r\n        console.log(\"오류발생\");\r\n        return null;\r\n    }\r\n\r\n    const onChangeInput = e => {\r\n        const { name } = e.target;\r\n        onChangeField({ key: name, value: e.target.value });\r\n    };\r\n\r\n    const { id, nickname, email, score, team } = mypage;\r\n\r\n    return (\r\n        <>\r\n            {/* 로딩 중이 아니고, mypage 데이터가 존재할 때만 보여줌 */}\r\n            {!loading && mypage && (\r\n                <LoginAfterArea>\r\n                    ID<StyledInput type=\"text\" name=\"id\" placeholder={id} defaultValue={modifiedid} onChange={onChangeInput} />\r\n                    E-Mail<StyledInput type=\"text\" name=\"email\" placeholder={email} value={modifiedemail} onChange={onChangeInput} />\r\n            \r\n                    Nickname<StyledInput type=\"text\" name=\"nickname\" placeholder={nickname} value={modifiednickname} onChange={onChangeInput} />\r\n               \r\n                    Team<StyledInput type=\"text\" name=\"team\" placeholder={team} value={modifiedteam} onChange={onChangeInput} />\r\n                 \r\n                    점수<StyledInput name=\"score\" defaultValue={score} readOnly />\r\n                    <br />\r\n                    <div className=\"ButtonArea\">\r\n                        <StyledButton onClick={onLogout} style={{ textDecoration: 'none', color: 'white' }}>log out</StyledButton>\r\n                            &nbsp;\r\n                        <StyledButton onClick={onSubmit} style={{ textDecoration: 'none', color: 'white' }}>submit</StyledButton>\r\n                    </div>\r\n                </LoginAfterArea>\r\n            )}\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default LoginAfterForm;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst MYPAGE = 'mypages/MYPAGE';\r\nconst MYPAGE_SUCCESS = 'mypages/MYPAGE_SUCCESS';\r\nconst MYPAGE_FAILURE = 'mypages/MYPAGE_FAILURE';\r\n\r\nexport const mypagees = createAction(MYPAGE, ({ token }) => ({ token }));\r\n\r\nconst myPageSaga = createRequestSaga(MYPAGE, authAPI.mypage);\r\n\r\nexport function* mypageSaga() {\r\n    yield takeLatest(MYPAGE, myPageSaga);\r\n}\r\n\r\nconst initialState = {\r\n    myPage: null,\r\n    error: null,\r\n    logged: false,\r\n};\r\n\r\nconst mypages = handleActions(\r\n    {\r\n        [MYPAGE_SUCCESS]: (state, { payload: myPage }) => ({\r\n            ...state,\r\n            myPage,\r\n            logged: true,\r\n        }),\r\n        [MYPAGE_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n            logged: false,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default mypages;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'mypagemodified/CHANGE_FIELD';\r\nconst INITIALIZE = 'mypagemodified/INITIALIZE';\r\nconst MODIFIED_POST = 'mypagemodified/MODIFIED_POST';\r\nconst MODIFIED_SUCCESS = 'mypagemodified/MODIFIED_SUCEESS';\r\nconst MODOFIED_FAILURE = 'mypagemodified/MODIFIED_FAILURE';\r\n\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({ key, value, }));\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const modifiedPost = createAction(MODIFIED_POST, ({ token, id, password, nickname, team, email }) => ({ token, id, password, nickname, team, email, }));\r\n\r\n\r\n// 사가 생성\r\nconst mypageModifiedSaga = createRequestSaga(MODIFIED_POST, authAPI.mypagemodified);\r\n\r\nexport function* mypagemodifiedSaga() {\r\n    yield takeLatest(MODIFIED_POST, mypageModifiedSaga);\r\n}\r\n\r\nconst initialState = {\r\n    mypagemodified: null,\r\n    id: '',\r\n    password: '',\r\n    nickname: '',\r\n    team: '',\r\n    email: '',\r\n    error: null,\r\n};\r\n\r\nconst mypagemodified = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 key 값을 업데이트\r\n        }),\r\n        [MODIFIED_SUCCESS]: (state, { payload: mypagemodified }) => ({\r\n            ...state,\r\n            mypagemodified,\r\n        }),\r\n        [MODOFIED_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\n\r\nexport default mypagemodified;","import React, { useEffect, useState, useCallback } from 'react';\r\nimport LoginAfterForm from '../components/auth/LoginAfterForm';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { mypagees } from '../modules/mypages';\r\nimport { logout } from '../modules/login';\r\nimport { changeField, initialize, modifiedPost } from '../modules/mypagemodified';\r\nimport { getCookie } from '../lib/cookie';\r\n\r\n\r\nconst MypageContainer = ({ history, location }) => {\r\n    const [mypage, setMypage] = useState({});\r\n    const dispatch = useDispatch();\r\n    const { myPage, id, password, nickname, team, email, loading } = useSelector(({ mypages, mypagemodified, loading }) => ({\r\n        myPage: mypages.myPage,\r\n        error: mypages.error,\r\n        mypagemodified: mypagemodified.mypagemodified,\r\n        id: mypagemodified.id,\r\n        password: mypagemodified.password,\r\n        nickname: mypagemodified.nickname,\r\n        team: mypagemodified.team,\r\n        email: mypagemodified.email,\r\n        loading: loading['mypages/MYPAGE'],\r\n    }));\r\n\r\n    // 로그아웃 (토큰을 삭제 후 로그인 페이지로 이동)\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n        alert(\"로그아웃 성공\");\r\n        history.push(\"/\");\r\n    };\r\n\r\n    // 페이지가 마운트(처음 보여질 때)될 때 마이페이지 api 요청\r\n    useEffect(() => {\r\n        const users = localStorage.getItem(\"users\") ? localStorage.getItem(\"users\") : null;\r\n        const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n        const token = getCookie(\"user\");\r\n        if (users) {\r\n            dispatch(mypagees({ token }));\r\n        }\r\n        if (!users && !admin) {\r\n            alert(\"로그인해야 사용가능한 기능입니다.\");\r\n            history.push(\"/login\");\r\n        }\r\n    }, [dispatch, history]);\r\n\r\n    // 마이페이지 수정 api 요청\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const users = localStorage.getItem(\"users\") ? localStorage.getItem('users') : null;\r\n        const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n        const token = getCookie(\"user\");\r\n        if (users) {\r\n            dispatch(modifiedPost({ id, password, nickname, team, email, token }));\r\n            dispatch(logout());\r\n            history.push('/');\r\n        }\r\n        if (admin) {\r\n            dispatch(logout());\r\n            history.push('/notification');\r\n        }\r\n    };\r\n\r\n    // mypage 정보 저장\r\n    useEffect(() => {\r\n        if (myPage) {\r\n            if (myPage) {\r\n                setMypage(myPage);\r\n            }\r\n        }\r\n    }, [mypage, myPage]);\r\n\r\n    // 언마운트 될 때 인풋 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize());\r\n        }\r\n    }, [dispatch]);\r\n\r\n    // 인풋 값 변경\r\n    const onChangeField = useCallback(payload => dispatch(changeField(payload)), [dispatch]);\r\n\r\n    return (\r\n        <LoginAfterForm loading={loading} mypage={mypage} onLogout={onLogout} onSubmit={onSubmit} onChangeField={onChangeField} modifiedid={id} modifiedemail={email} modifiednickname={nickname} modifiedteam={team} modifiedpassword={password} />\r\n    );\r\n};\r\n\r\nexport default withRouter(MypageContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../components/common/Header';\r\nimport MypageContainer from '../containers/MypageContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n/* 화면 전체를 채움 */\r\nconst LoginAfterPageBlock = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n`;\r\n\r\n\r\n\r\nconst LoginAfterPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>마이페이지 - INFO WARGAME</title>\r\n            </Helmet>\r\n            <LoginAfterPageBlock>\r\n                <Header />\r\n                <MypageContainer />\r\n            </LoginAfterPageBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginAfterPage;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as userAPI from '../lib/api/user';\r\n\r\n\r\nconst CHANGE_FIELD = 'search/CHANGE_FIELD';\r\nconst CHANGE_INPUT = 'search/CHANGE_INPUT';\r\nconst INITIALIZE = 'search/INITIALIZE';\r\nconst USER_SEARCH = 'search/USER_SEARCH';\r\nconst USER_SEARCH_SUCCESS = 'search/USER_SEARCH_SUCCESS';\r\nconst USER_SEARCH_FAILURE = 'search/USER_SEARCH_FAILURE';\r\n\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({ key, value }));\r\nexport const changeInput = createAction(CHANGE_INPUT, ({ key, value }) => ({ key, value }));\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const userSearchPost = createAction(USER_SEARCH, ({ search, property, token }) => ({ search, property, token }));\r\n\r\n// 사가 생성\r\nconst searchsaga = createRequestSaga(USER_SEARCH, userAPI.searchuser);\r\n\r\nexport function* searchSaga() {\r\n    yield takeLatest(USER_SEARCH, searchsaga);\r\n}\r\n\r\nconst initialState = {\r\n    search: '',\r\n    property: 'id',\r\n    searchuser: null,\r\n};\r\n\r\nconst search = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 key 값을 업데이트\r\n        }),\r\n        // 유저검색 성공\r\n        [USER_SEARCH_SUCCESS]: (state, { payload: searchuser }) => ({\r\n            ...state,\r\n            searchuser,\r\n        }),\r\n        // 유저검색 실패\r\n        [USER_SEARCH_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default search;","import client from './client';\r\n\r\n// user 검색\r\nexport const searchuser = ({ search, property, token }) => {\r\n    return client.post(`/api/account/searchuser`, { search, property }, { headers: { \"Authentication\": token } });\r\n}\r\n\r\n// api/user/search?${column}?${srch}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst UserItemnBox = styled.div`\r\nwidth: 100%;\r\nmargin-left: -10px;\r\nheight: 100%;\r\nmargin-bottom: -0px;\r\nbackground: #00000;\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n\r\nspan {\r\n    font-size: 50px;\r\n    color: white;\r\n    margin-top: 25px;\r\n}\r\n<<<<<<< HEAD\r\n\r\n/* 브라우저 크기에 따라 가로 크기 변경 */\r\n@media (max-width: 1024px) {\r\n    width: 100%;\r\n}\r\n@media (max-width: 768px) {\r\n    width: 100%;\r\n}\r\n=======\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 100%;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n>>>>>>> 1ccb9f9093abd7cf2e230053fadb25dc6ecb8a7e\r\n\r\nfont-family: 'Do Hyeon', sans-serif;\r\ncolor: white;  \r\n`;\r\n\r\nconst StyledTable = styled.div`\r\nposition: relative;\r\nfont-size: 2rem;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 1110.5px;\r\nheight: 430px;\r\nmargin-left: 43px;\r\nmargin-top: 140px;\r\nbottom: 20px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\n\r\n/* 브라우저 크기에 따라 가로 크기 변경 */\r\n@media (max-width: 1024px) {\r\n    width: 100%;\r\n}\r\n@media (max-width: 768px) {\r\n    width: 100%;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    font-size: 24px;\r\n}\r\n\r\nfont-family: 'Do Hyeon', sans-serif;\r\ncolor: white;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n    position: relative;\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 340px;\r\n    height: 50px;\r\n    margin-right: 730px;\r\n    top: 120px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    text-align: center;\r\n    color: white;\r\n\r\n    font-family: 'Do Hyeon', sans-serif;\r\n    color: white;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    position: relative;\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 250px;\r\n    height: 50px;\r\n    right: 345px;\r\n    top: 69px;\r\n    left: 330px;\r\n    margin-bottom: -160px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    text-align: center;\r\n    color: white;\r\n\r\n    font-family: 'Do Hyeon', sans-serif;\r\n    color: white;\r\n\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\nposition: relative;\r\nfont-size: 2rem;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 109.5px;\r\nheight: 51px;\r\ntop: 106px;\r\nleft: 520px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: grey;\r\ncursor: pointer;\r\n\r\n`;\r\n\r\n\r\n// 유저검색창\r\nconst UserItem = ({ onSubmit, onChangeField, property, search, information }) => {\r\n\r\n\r\n    const onChange = e => {\r\n        const { name } = e.target;\r\n        onChangeField({ key: name, value: e.target.value });\r\n    };\r\n\r\n    const onChangeInput = e => {\r\n        const { name } = e.target;\r\n        onChangeField({ key: name, value: e.target.value });\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <UserItemnBox>\r\n                <StyledSelect name=\"property\" onChange={onChange} value={property}>\r\n                    <option value=\"id\">ID</option>\r\n                    <option value=\"name\">NickName</option>\r\n                    <option value=\"email\">Email</option>\r\n                    <option value=\"team\">Team</option>\r\n                </StyledSelect>\r\n                <StyledInput name=\"search\" type=\"text\" value={search} onChange={onChangeInput} />\r\n            &nbsp;\r\n            <StyledButton style={{ marginTop: '50px' }} onClick={onSubmit}>search</StyledButton>\r\n                <StyledTable>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>-name-</th>\r\n                                <th>-team-</th>\r\n                                <th>-score-</th>\r\n                                <th>-rank-</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <UserRow information={information} />\r\n                    </table>\r\n                </StyledTable>\r\n            </UserItemnBox>\r\n        </>\r\n    );\r\n};\r\n\r\n// 검색결과로 리턴된 배열을 반복해서 보여주는 부분\r\nconst UserRow = ({ information }) => {\r\n\r\n    // information 값이 유효할 때 (렌더링 오류가 나지 않게 객체든 배열이든 꼭 이 유효성 검사를 해주어야 함)\r\n    if (information === null) {\r\n        return null;\r\n    }\r\n\r\n    if (!information) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {information.map(info =>\r\n                (<UserList key={info.num} information={info} />\r\n                ))}\r\n        </>\r\n    );\r\n}\r\n\r\n// 검색결과 리턴된 배열의 내용을 보여주는 부분\r\nconst UserList = ({ information }) => {\r\n    const { name, team, score, rank } = information;\r\n\r\n    return (\r\n        <>\r\n            <tbody>\r\n                <tr>\r\n                    <td>{name}</td>\r\n                    <td>{team}</td>\r\n                    <td>{score}</td>\r\n                    <td>{rank}</td>\r\n                </tr>\r\n            </tbody>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UserItem;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initialize, userSearchPost } from '../modules/searchuser';\r\nimport UserItem from '../components/table/UserItem';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getCookie } from '../lib/cookie';\r\n\r\nconst UserContainer = ({ history }) => {\r\n    const [info, setInfo] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const { searchuser, property, search } = useSelector(({ searchuser }) => ({\r\n        searchuser: searchuser.searchuser,\r\n        search: searchuser.search,\r\n        property: searchuser.property,\r\n        error: searchuser.error,\r\n    }));\r\n\r\n    // 인풋 값 업데이트\r\n    const onChange = useCallback(payload => dispatch(changeField(payload)), [dispatch]);\r\n\r\n\r\n    // 컴포넌트가 맨 처음 렌더링 될 때 인풋 초기화\r\n    useEffect(() => {\r\n        dispatch(initialize());\r\n    }, [dispatch]);\r\n\r\n    // 컴포넌트가 언마운트될 때 인풋 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize());\r\n        }\r\n    }, [dispatch]);\r\n\r\n    // user 검색 api 요청\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const users = localStorage.getItem(\"users\") ? localStorage.getItem('users') : null;\r\n        const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n        const token = getCookie('user');\r\n        if (users) {\r\n            dispatch(userSearchPost({ search, property, token }));\r\n        }\r\n        if (admin) {\r\n            dispatch(userSearchPost({ search, property, token }));\r\n        }\r\n        if (!users && !admin) {\r\n            alert(\"로그인해야 사용가능한 기능입니다.\");\r\n            history.push(\"/login\");\r\n        }\r\n\r\n    };\r\n\r\n\r\n    // user 정보 성공 / 실패 처리\r\n    useEffect(() => {\r\n        if (searchuser) {\r\n            if (searchuser) {\r\n                setInfo(searchuser.contents);\r\n            }\r\n        }\r\n    }, [searchuser, info]);\r\n\r\n    return (\r\n        <UserItem onChangeField={onChange} onSubmit={onSubmit} search={search} property={property} information={info} />\r\n    );\r\n};\r\n\r\nexport default withRouter(UserContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../components/common/Header';\r\nimport UserContainer from '../containers/UserContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n/* 화면 전체를 채움 */\r\nconst UserPageBlock = styled.div`\r\nheight: 100%;\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n\r\n/* 브라우저 크기에 따라 가로 크기 변경 */\r\n@media (max-width: 1024px) {\r\n    width: 768px;\r\n    height: 100%\r\n}\r\n@media (min-width: 768px) {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n`;\r\n\r\nconst UserPageArea = styled.div`\r\nwidth: 80%;\r\nheight: 80%;\r\nbackground: #000000;\r\n\r\np {\r\n    position: absolute;\r\n    font-family: Noto Sans KR;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 30px;\r\n    line-height: 43px;\r\n    color: white;\r\n}\r\n\r\n#text1 {\r\n    margin-left: 50px;\r\n}\r\n\r\n`;\r\n\r\n\r\nconst UserPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>유저 검색 - INFO WARGAME</title>\r\n            </Helmet>\r\n            <UserPageBlock>\r\n                <Header />\r\n                <UserPageArea>\r\n                    <UserContainer />\r\n                </UserPageArea>\r\n            </UserPageBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserPage;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../common/Header';\r\nimport { BsDownload } from \"react-icons/bs\";\r\n\r\n\r\nconst ShowQuizitemBox = styled.div`\r\nwidth: 100%;\r\nheight: 100%;\r\nmargin-bottom: -0px;\r\nbackground: #00000;\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n\r\nspan {\r\n    font-size: 50px;\r\n    color: white;\r\n    margin-top: 25px;\r\n}\r\n\r\nfont-family: 'Do Hyeon', sans-serif;\r\ncolor: white;  \r\n`;\r\n\r\nconst QuizContent = styled.div`\r\nposition: absolute;\r\nwidth: 90%;\r\nheight: 80%;\r\nright: 100px;\r\nleft: 100px;\r\nborder: none;\r\nborder-radius: 5px;\r\n\r\np {\r\n    color: white;\r\n    font-size: 30px;\r\n}\r\n`;\r\n\r\n\r\nconst StyledInput = styled.input`\r\n    position: absolute;\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 925px;\r\n    height: 52px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    border-right: none;\r\n    text-align: justify;\r\n    color: white;\r\n\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 768px;\r\n    }\r\n    @media (max-width: 1000px) {\r\n        width: 50%;\r\n    }\r\n    @media (max-width: 900px) {\r\n        width: 40%;\r\n    }\r\n    @media (max-width: 768px) {\r\n    width: 10%;\r\n    }\r\n`;\r\n\r\n\r\nconst StyledButton = styled.button`\r\nposition: absolute;\r\nfont-size: 2rem;\r\nborder-right: 2px solid #FFFFFF;\r\nborder-top: 2px solid #FFFFFF;\r\nborder-bottom: 2px solid #FFFFFF;\r\nborder-left: 2px solid #FFFFFF;\r\noutline: none;\r\nbox-sizing: border-box;\r\nwidth: 150px;\r\nheight: 52px;\r\nright: 210px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\n&:hover {\r\n    cursor: pointer;\r\n}\r\n`;\r\n\r\nconst ShowQuizContent = styled.textarea`\r\nposition: absolute;\r\nwidth: 82%;\r\nheight: 50%;\r\nborder: none;\r\nborder-radius: 5px;\r\nbackground: black;\r\ncolor: white;\r\nresize: none;\r\nleft: 100px;\r\ntop: 130px;\r\nfont-size: 25px;\r\n\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 768px;\r\n    }\r\n    @media (max-width: 768px) {\r\n    width: 100%;\r\n    }\r\n`;\r\n\r\n\r\nconst ShowQuizItem = ({ loadquiz, flag, loading, onChangeField, onSubmit, onDownload, quiz_code, onCheckAnswer }) => {\r\n\r\n    const onChange = e => {\r\n        const { name } = e.target;\r\n        onChangeField({ key: name, value: e.target.value });\r\n    };\r\n\r\n    const checkAnswer = e => {\r\n        onCheckAnswer(quiz_code);\r\n    };\r\n\r\n    const onClick = e => {\r\n        if (loadquiz.file === null) {\r\n            alert(\"다운로드할 파일이 없습니다.\");\r\n        }\r\n        if (loadquiz.file) {\r\n            onDownload(quiz_code);\r\n        }\r\n    };\r\n\r\n    const admin = localStorage.getItem(\"admin\") ? localStorage.getItem(\"admin\") : null;\r\n\r\n    if (loading) {\r\n        return (\r\n            <>\r\n                <Header />\r\n                <ShowQuizitemBox>\r\n                    <QuizContent>\r\n                        <hr style={{ width: \"1125px\", marginRight: '150px', marginTop: '100px' }} />\r\n                        <ShowQuizContent>로딩중입니다.</ShowQuizContent>\r\n                        <StyledInput style={{ top: '450px', left: '100px' }} type=\"readonly\"></StyledInput>\r\n                        <StyledButton style={{ top: '450px' }}><BsDownload /></StyledButton>\r\n                        <StyledInput style={{ top: '520px', left: '100px' }}></StyledInput>\r\n                        <StyledButton style={{ top: '520px' }}>제출</StyledButton>\r\n                    </QuizContent>\r\n                </ShowQuizitemBox>\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (loadquiz === null) {\r\n        return (\r\n            <>\r\n                <Header />\r\n                <br />\r\n                <ShowQuizitemBox>\r\n                    <QuizContent>\r\n                        <hr style={{ width: \"1125px\", marginRight: '150px', marginTop: '100px' }} />\r\n                        <ShowQuizContent>퀴즈가 존재하지 않습니다.</ShowQuizContent>\r\n                        <StyledInput style={{ top: '450px', left: '100px' }}></StyledInput>\r\n                        <StyledButton style={{ top: '450px' }}><BsDownload /></StyledButton>\r\n                        <StyledInput style={{ top: '520px', left: '100px' }}></StyledInput>\r\n                        <StyledButton style={{ top: '520px' }}>제출</StyledButton>\r\n                    </QuizContent>\r\n                </ShowQuizitemBox>\r\n            </>\r\n        );\r\n    }\r\n\r\n    const { content, file } = loadquiz;\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <ShowQuizitemBox>\r\n                <p style={{ position: 'relative', fontSize: '16px', color: 'white', right: '270px', bottom: '220px' }}>*유의사항* : 파일은 모두 zip 형식으로 다운로드됩니다. <br /> *유의사항* 파일 용량이 클 경우 다운로드에 시간이 걸릴 수도 있습니다.</p>\r\n                {admin ? <StyledButton style={{ border: 'none', color: 'red', top: '199px', borderBottom: 'none', zIndex: '1' }} onClick={onSubmit}>문제삭제</StyledButton> : null}\r\n                <QuizContent style={{ whiteSpace: 'pre' }}>\r\n                    <hr style={{ width: \"1125px\", marginRight: '150px', marginTop: '100px' }} />\r\n                    <ShowQuizContent disabled>{content}</ShowQuizContent>\r\n                    <StyledInput style={{ top: '450px', left: '100px' }} type=\"readonly\" value={file}></StyledInput>\r\n                    <StyledButton style={{ top: '450px' }} onClick={onClick}><BsDownload /></StyledButton>\r\n                    <StyledInput style={{ top: '520px', left: '100px' }} name=\"flag\" onChange={onChange} type=\"text\" value={flag} ></StyledInput>\r\n                    <StyledButton style={{ top: '520px' }} onClick={checkAnswer}>제출</StyledButton>\r\n                </QuizContent>\r\n            </ShowQuizitemBox>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShowQuizItem;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as quizAPI from '../lib/api/quiz';\r\n\r\nconst INITIALIZE = 'loadquiz/INITIALIZE';\r\nconst LOAD_QUIZ = 'loadquiz/LOAD_QUIZ';\r\nconst LOAD_QUIZ_SUCCESS = 'loadquiz/LOAD_QUIZ_SUCCESS';\r\nconst LOAD_QUIZ_FAILURE = 'loadquiz/LOAD_QUIZ_FAILURE';\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const loadquizPost = createAction(LOAD_QUIZ, quiz_code => quiz_code);\r\n\r\n// 사가 생성\r\nconst loadquizPostSaga = createRequestSaga(LOAD_QUIZ, quizAPI.loadquiz);\r\n\r\n// 사가 통합\r\nexport function* loadquizpostSaga() {\r\n    yield takeLatest(LOAD_QUIZ, loadquizPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    loadquiz: null,\r\n    error: null,\r\n};\r\n\r\nconst loadquiz = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n\r\n        [LOAD_QUIZ_SUCCESS]: (state, { payload: loadquiz }) => ({\r\n            ...state,\r\n            loadquiz,\r\n        }),\r\n        [LOAD_QUIZ_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default loadquiz;","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as adminAPI from '../lib/api/admin';\r\n\r\n\r\n\r\nconst DELETE_FILE = 'deletefile/DELETE_FILE';\r\nconst DELETE_FILE_SUCCESS = 'deletefile/DELETE_FILE_SUCCESS';\r\nconst DELETE_FILE_FAILURE = 'deletefile/DELETE_FILE_FAILURE';\r\n\r\nexport const deletefilePost = createAction(DELETE_FILE, ({ quiz_num, token }) => ({ quiz_num, token }));\r\n\r\nconst deleteFileSaga = createRequestSaga(DELETE_FILE, adminAPI.deletefile);\r\n\r\n// 사가 생성\r\nexport function* deletefileSaga() {\r\n    yield takeLatest(DELETE_FILE, deleteFileSaga);\r\n}\r\n\r\nconst initialState = {\r\n    deletefile: null,\r\n    error: null,\r\n};\r\n\r\nconst deletefile = handleActions(\r\n    {\r\n        [DELETE_FILE_SUCCESS]: (state, { payload: deletefile }) => ({\r\n            ...state,\r\n            deletefile,\r\n        }),\r\n        [DELETE_FILE_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n            check: false,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default deletefile; ","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as quizAPI from '../lib/api/quiz';\r\n\r\nconst INITIALIZE = 'checkanswer/INITIALIZE';\r\nconst CHANGE_FIELD = 'checkanswer/CHANGE_FIELD';\r\nconst CHECK_ANSWER = 'checkanswer/CHECK_ANSWER';\r\nconst CHECK_ANSWER_SUCCESS = 'checkanswer/CHECK_ANSWER_SUCCESS';\r\nconst CHECK_ANSWER_FAILURE = 'checkanswer/CHECK_ANSWER_FAILURE';\r\n\r\nexport const checkanswerinitialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({ key, value }));\r\nexport const checkanswerPost = createAction(CHECK_ANSWER, ({ quiz_code, flag, token }) => ({ quiz_code, flag, token }));\r\n\r\nconst checkanswersaga = createRequestSaga(CHECK_ANSWER, quizAPI.checkanswer);\r\n\r\n// 사가 생성\r\nexport function* checkanswerSaga() {\r\n    yield takeLatest(CHECK_ANSWER, checkanswersaga);\r\n}\r\n\r\nconst initialState = {\r\n    checkanswer: null,\r\n    flag: null,\r\n    error: null,\r\n};\r\n\r\nconst checkanswer = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 값을 업데이트\r\n        }),\r\n        [CHECK_ANSWER_SUCCESS]: (state, { payload: checkanswer }) => ({\r\n            ...state,\r\n            checkanswer,\r\n        }),\r\n        [CHECK_ANSWER_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default checkanswer; ","import React, { useEffect, useCallback } from 'react';\r\nimport ShowQuizItem from '../components/Quiz/ShowQuizItem';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { loadquizPost, initialize } from '../modules/loadquiz';\r\nimport { deletequizPost, quizinitialize } from '../modules/deletequiz';\r\nimport { deletefilePost } from '../modules/deletefile';\r\nimport { changeField, checkanswerinitialize, checkanswerPost } from '../modules/checkanswer';\r\nimport { getCookie } from '../lib/cookie';\r\n// import { downloadfilePost, downloadinitialize } from '../modules/downloadfile';\r\n// import { saveAs } from 'file-saver';\r\n\r\n\r\n\r\n\r\nconst LoadQuizContainer = ({ match, history }) => {\r\n    const dispatch = useDispatch();\r\n    const { num } = match.params;\r\n    var quiz_num = { num }.num;\r\n    // const fileSaver = require('file-saver');\r\n    const { loadquiz, deletequiz, deletequizerror, checkanswer, checkanswererror, flag, error, loading } = useSelector(({ loadquiz, deletequiz, deletefile, downloadfile, loading, checkanswer }) => ({\r\n        loadquiz: loadquiz.loadquiz,\r\n        error: loadquiz.error,\r\n        deletequiz: deletequiz.deletequiz,\r\n        deletequizerror: deletequiz.error,\r\n        downloadfile: downloadfile.downloadfile,\r\n        downloadfileerror: downloadfile.error,\r\n        checkanswer: checkanswer.checkanswer,\r\n        checkanswererror: checkanswer.error,\r\n        flag: checkanswer.flag,\r\n        loading: loading['loadquiz/LOAD_QUIZ'],\r\n    }));\r\n\r\n    // 인풋 값 업데이트\r\n    const onChange = useCallback(payload => dispatch(changeField(payload)), [dispatch]);\r\n\r\n    // 페이지가 마운트(처음 보여질 때)될 때 퀴즈목록 api 요청\r\n    useEffect(() => {\r\n        dispatch(loadquizPost(num));\r\n\r\n        return () => {\r\n            dispatch(initialize());\r\n            dispatch(checkanswerinitialize());\r\n        };\r\n    }, [dispatch, num]);\r\n\r\n    // 문제 삭제 api 요청\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const users = localStorage.getItem(\"users\") ? localStorage.getItem('users') : null;\r\n        const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n        const token = getCookie(\"user\");\r\n        if (admin) {\r\n            dispatch(deletefilePost({ quiz_num, token }));\r\n            dispatch(deletequizPost({ quiz_num, token }));\r\n        }\r\n        if (users) {\r\n            alert(\"어드민만 사용 가능한 기능입니다.\");\r\n        }\r\n    };\r\n\r\n    const onDownload = quiz_code => {\r\n        let url = `http://211.35.225.252:4000/api/challenge/download/${quiz_code}`\r\n        return fetch(url, {\r\n            method: 'GET',\r\n            responseType: 'blob',\r\n        })\r\n            .then(response => response.blob())\r\n            .then(blob => {\r\n\r\n                var url = window.URL.createObjectURL(blob);\r\n                var a = document.createElement('a');\r\n                a.href = url;\r\n                a.setAttribute('download', 'download.zip');\r\n                // a.download = \"filename.zip\";\r\n                // document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\r\n                a.click();\r\n                a.remove();  //afterwards we remove the element again\r\n            })\r\n        // 리덕스코드로 파일다운로드 처리가 잘 되지 않아 fetch로 수정, 다운로드가 되므로 리덕스 코드 주석 처리\r\n        /*const users = localStorage.getItem(\"users\") ? localStorage.getItem('user') : null;\r\n        const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n        if (users) {\r\n            dispatch(downloadfilePost(num));\r\n        }\r\n        if (admin) {\r\n            dispatch(downloadfilePost(num));\r\n        }\r\n        else {\r\n            alert(\"로그인이 필요합니다.\");\r\n        }\r\n        */\r\n    };\r\n\r\n    // 문제 정답 체크\r\n    const onCheckAnswer = (quiz_code) => {\r\n        const users = localStorage.getItem(\"users\") ? localStorage.getItem('users') : null;\r\n        const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n        const token = getCookie(\"user\");\r\n        if (admin) {\r\n            dispatch(checkanswerPost({ quiz_code, flag, token }));\r\n        }\r\n        if (users) {\r\n            dispatch(checkanswerPost({ quiz_code, flag, token }));\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (loadquiz) {\r\n        }\r\n        if (error) {\r\n            console.log(error);\r\n        }\r\n    }, [loadquiz, error]);\r\n\r\n    useEffect(() => {\r\n        if (deletequiz) {\r\n            alert(\"문제 삭제 완료\");\r\n            history.push('/challenges');\r\n            dispatch(quizinitialize());\r\n        }\r\n        if (deletequizerror) {\r\n            console.log(deletequizerror);\r\n        }\r\n    }, [dispatch, deletequiz, deletequizerror, history]);\r\n\r\n    useEffect(() => {\r\n        if (checkanswer) {\r\n            alert(\"정답입니다!\");\r\n            history.push(\"/challenges\");\r\n        }\r\n        if (checkanswererror) {\r\n            alert(\"오답입니다.\");\r\n            window.location.reload();\r\n        }\r\n    }, [checkanswer, checkanswererror, history]);\r\n\r\n    // 리덕스코드로 파일다운로드 처리가 잘 되지 않아 fetch로 수정, 다운로드가 되므로 리덕스 코드 주석 처리\r\n    /*useEffect(() => {\r\n        if (downloadfile) {\r\n            console.log(\"요청성공\");\r\n            const url = window.URL.createObjectURL(new Blob([downloadfile]));\r\n            const link = document.createElement(\"a\");\r\n            link.href = url;\r\n            console.log(link);\r\n            link.setAttribute(\"download\", 'file.zip');\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            window.URL.revokeObjectURL(url);\r\n        }\r\n        if (downloadfileerror) {\r\n            console.log(downloadfileerror);\r\n            console.log(\"오류발생\");\r\n        }\r\n    }, [downloadfile, downloadfileerror]);*/\r\n\r\n    return <ShowQuizItem loadquiz={loadquiz} loading={loading} flag={flag} onChangeField={onChange} onSubmit={onSubmit} onDownload={onDownload} quiz_code={quiz_num} onCheckAnswer={onCheckAnswer} />;\r\n};\r\n\r\n\r\nexport default withRouter(LoadQuizContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport LoadQuizContainer from '../containers/LoadQuizContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n\r\n/* 화면 전체를 채움 */\r\nconst ShowQuizBlock = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n`;\r\n\r\nconst ShowQuiz = () => {\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>문제 풀기 - INFO WARGAME</title>\r\n            </Helmet>\r\n            <ShowQuizBlock>\r\n                <LoadQuizContainer />\r\n            </ShowQuizBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShowQuiz;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as adminAPI from '../lib/api/admin';\r\n\r\nconst ADMIN_REGISTER_CHANGE_FIELD = 'adminregister/ADMIN_REGISTER_CHANGE_FIELD';\r\nconst ADMIN_REGISTER_INITIALIZE = 'adminregister/ADMIN_REGISTER_INITIALIZE';\r\nconst ADMIN_REGISTER_POST = 'adminregister/ADMIN_REGISTER_POST';\r\nconst ADMIN_REGISTER_POST_SUCCESS = 'adminregister/ADMIN_REGISTER_POST_SUCCESS';\r\nconst ADMIN_REGISTER_POST_FAILURE = 'adminregister/ADMIN_REGISTER_POST_FAILURE';\r\n\r\nexport const adminRegisterInitialize = createAction(ADMIN_REGISTER_INITIALIZE);\r\nexport const adminRegisterChangeField = createAction(ADMIN_REGISTER_CHANGE_FIELD, ({ key, value }) => ({ key, value, }));\r\nexport const adminRegisterPost = createAction(ADMIN_REGISTER_POST, ({ id, password, nickname, code }) => ({ id, password, nickname, code }));\r\n\r\n// 사가 생성\r\nconst adminRegisterPostSaga = createRequestSaga(ADMIN_REGISTER_POST, adminAPI.adminregister);\r\n\r\nexport function* adminregistersaga() {\r\n    yield takeLatest(ADMIN_REGISTER_POST, adminRegisterPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    id: '',\r\n    password: '',\r\n    nickname: '',\r\n    code: '',\r\n    adminregister: '',\r\n    admin: false,\r\n    error: null,\r\n};\r\n\r\nconst adminregister = handleActions(\r\n    {\r\n        [ADMIN_REGISTER_INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [ADMIN_REGISTER_CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 key 값을 업데이트\r\n        }),\r\n        // 어드민 회원가입 성공\r\n        [ADMIN_REGISTER_POST_SUCCESS]: (state, { payload: adminregister }) => ({\r\n            ...state,\r\n            adminregister,\r\n        }),\r\n        [ADMIN_REGISTER_POST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\n\r\nexport default adminregister;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../common/Header';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst AdminRegisterArea = styled.div`\r\n    padding: 2rem;\r\n    width: 560px;\r\n    background: #000000;\r\n    border-radius: 2px;\r\n    height: 700px;\r\n    margin-top: 100px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-right: 50px;\r\n    margin-top: 50px;\r\n\r\n    .ButtonArea {\r\n        width: 604.5px;\r\n    }\r\n\r\n    .findpassword {\r\n        font-family: Noto Sans KR;\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 35px;\r\n        line-height: 51px;\r\n        display: flex;\r\n        align-items: center;\r\n        text-align: center;\r\n        color: #5A5A5A;\r\n        margin-right: 346px;\r\n    }\r\n\r\n    .modal {\r\n        width: 400px;\r\n        background: white;x\r\n    }\r\n\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 100%;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n    \r\n    h1 {\r\n        color: white;\r\n    }\r\n    font-family: 'Do Hyeon', sans-serif;\r\n    color: white;   \r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 600px;\r\n    height: 52px;\r\n    left: 642px;\r\n    top: 420px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    text-align: center;\r\n    color: white;\r\n  \r\n`;\r\n\r\nconst StyledButton = styled.button`\r\nfont-size: 2rem;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 299.5px;\r\nheight: 52px;\r\nleft: 642px;\r\ntop: 420px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\n`;\r\n\r\n\r\nconst AdminRegisterForm = ({ id, password, nickname, code, onChangeField, onSubmit, idCheckSubmit }) => {\r\n\r\n    const onChangeInput = e => {\r\n        const { name } = e.target;\r\n        onChangeField({ key: name, value: e.target.value });\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Header />\r\n            <AdminRegisterArea>\r\n                <h1>어드민 회원가입</h1>\r\n                <StyledInput name=\"id\" placeholder=\"id\" onChange={onChangeInput} value={id} />\r\n                <StyledButton style={{ marginLeft: '720px', marginTop: '-52px', width: '100px', fontSize: '16px' }} onClick={idCheckSubmit} >중복확인</StyledButton>\r\n                <br />\r\n                <StyledInput name=\"password\" type=\"password\" placeholder=\"password\" onChange={onChangeInput} value={password} />\r\n                <br />\r\n                <StyledInput name=\"nickname\" placeholder=\"nickname\" onChange={onChangeInput} value={nickname} />\r\n                <br />\r\n                <StyledInput name=\"code\" placeholder=\"code\" onChange={onChangeInput} value={code} />\r\n                <br />\r\n                <div className=\"ButtonArea\">\r\n                    <StyledButton onClick={onSubmit}>sign in</StyledButton>\r\n                            &nbsp;\r\n                        <StyledButton><Link to=\"/adminlogin\" style={{ textDecoration: 'none', color: 'white' }}>login</Link></StyledButton>\r\n                </div>\r\n            </AdminRegisterArea>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdminRegisterForm;\r\n","import React, { useEffect, useCallback, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { adminRegisterChangeField, adminRegisterInitialize, adminRegisterPost } from '../modules/adminregister';\r\nimport AdminRegisterForm from '../components/auth/AdminRegisterForm';\r\nimport { idCheck, idinitialize } from '../modules/idcheck';\r\n\r\nconst AdminRegisterContainer = ({ location, history }) => {\r\n    const [getidcheck, setidcheck] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const { adminregister, id, password, nickname, idcheck, error, code, adminerror, } = useSelector(({ adminregister, idcheck }) => ({\r\n        id: adminregister.id,\r\n        password: adminregister.password,\r\n        nickname: adminregister.nickname,\r\n        code: adminregister.code,\r\n        idcheck: idcheck.idcheck,\r\n        error: idcheck.error,\r\n        adminregister: adminregister.adminregister,\r\n        adminerror: adminregister.error,\r\n    }));\r\n\r\n    // 아이디 중복 체크\r\n    const idCheckSubmit = () => {\r\n        dispatch(idCheck({ id }));\r\n    };\r\n\r\n    // 어드민 회원가입\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        if (getidcheck === true) {\r\n            dispatch(adminRegisterPost({ id, password, nickname, code }));\r\n        }\r\n        if ([id, password, nickname, code].includes('')) {\r\n            alert('빈 칸을 모두 입력하세요.');\r\n        }\r\n        if (getidcheck === false) {\r\n            alert(\"ID 중복체크가 완료되지 않았습니다.\");\r\n        }\r\n    };\r\n\r\n    // 인풋 값 변경하기\r\n    const onChangeField = useCallback(payload => dispatch(adminRegisterChangeField(payload)), [dispatch]);\r\n\r\n    // 컴포넌트가 맨 처음 렌더링 될 때 인풋 초기화\r\n    useEffect(() => {\r\n        dispatch(adminRegisterInitialize());\r\n    }, [dispatch]);\r\n\r\n    // 언마운트 될 때 인풋 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(adminRegisterInitialize());\r\n        }\r\n    }, [dispatch]);\r\n\r\n\r\n    // ID 중복 체크 성공여부 확인\r\n    useEffect(() => {\r\n        if (idcheck) {\r\n            alert('아이디가 사용 가능합니다.');\r\n            setidcheck(true);\r\n            dispatch(idinitialize());\r\n        }\r\n        if (error) {\r\n            alert(\"아이디가 사용 불가능합니다.\");\r\n            dispatch(idinitialize());\r\n        }\r\n    }, [idcheck, error, getidcheck, dispatch]);\r\n\r\n    // 어드민 회원가입 성공 여부 확인\r\n    useEffect(() => {\r\n        if (adminregister) {\r\n            alert(\"회원가입이 완료되었습니다!\");\r\n            history.push('/adminlogin');\r\n        }\r\n        if (adminerror) {\r\n            alert(\"회원가입 실패\");\r\n        }\r\n    }, [adminregister, adminerror, history]);\r\n\r\n\r\n    return <AdminRegisterForm\r\n        onChangeField={onChangeField}\r\n        idCheckSubmit={idCheckSubmit}\r\n        id={id}\r\n        password={password}\r\n        nickname={nickname}\r\n        code={code}\r\n        onSubmit={onSubmit}\r\n    />;\r\n};\r\n\r\n\r\nexport default withRouter(AdminRegisterContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport AdminRegisterContainer from '../containers/AdminRegisterContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n/* 화면 전체를 채움 */\r\nconst AdminRegisterPageBlock = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n`;\r\n\r\nconst AdminRegisterPage = () => {\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>어드민 회원가입 - INFO WARGAME</title>\r\n            </Helmet>\r\n            <AdminRegisterPageBlock>\r\n                <AdminRegisterContainer />\r\n            </AdminRegisterPageBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdminRegisterPage;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { setCookie } from '../../lib/cookie';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\n\r\nconst AdminLoginArea = styled.div`\r\n    padding: 2rem;\r\n    width: 100%;\r\n    background: #000000;\r\n    border-radius: 2px;\r\n    height: 700px;\r\n    margin-bottom: 50px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    .ButtonArea {\r\n        width: 604.5px;\r\n    }\r\n\r\n    .findpassword {\r\n        font-family: Noto Sans KR;\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 30px;\r\n        line-height: 51px;\r\n        display: flex;\r\n        align-items: center;\r\n        text-align: center;\r\n        color: #5A5A5A;\r\n        margin-right: 350px;\r\n    }\r\n\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 100%;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n    \r\n    h1 {\r\n        color: white;\r\n    }\r\n    font-family: 'Do Hyeon', sans-serif;\r\n    color: white;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 600px;\r\n    height: 52px;\r\n    left: 642px;\r\n    top: 420px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    text-align: center;\r\n    color: white;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\nfont-size: 2rem;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 299.5px;\r\nheight: 52px;\r\nleft: 642px;\r\ntop: 420px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\n`;\r\n\r\nconst AdminLoginForm = ({ history }) => {\r\n\r\n    const [login, setLogin] = useState({ id: '', password: '' });\r\n\r\n    const onChange = e => {\r\n        setLogin({ ...login, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        axios.post((\"http://211.35.225.252:4000/api/admin/login\"), {\r\n            id: login.id,\r\n            password: login.password,\r\n        }).then(result => {\r\n            if (result.status === 201) {   // 예외 처리\r\n                alert(\"로그인 성공!\");\r\n                if (!result.data.token) {\r\n                    alert(\"에러\");\r\n                    return;\r\n                }\r\n                setCookie(\"user\", result.data.token);\r\n                localStorage.setItem(\"admin\", 'admin');\r\n                history.push('/notification');\r\n            }\r\n            else if (result.status === 403) {\r\n                alert(\"로그인 실패\");\r\n                return <Redirect to=\"/adminlogin\" />\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AdminLoginArea>\r\n                <h1>어드민 로그인</h1>\r\n                <StyledInput name=\"id\" onChange={onChange} placeholder=\"id\" />\r\n                <br />\r\n                <StyledInput type=\"password\" name=\"password\" onChange={onChange} placeholder=\"password\" />\r\n                <br />\r\n                <div className=\"ButtonArea\">\r\n                    <StyledButton><Link to=\"/adminregister\" style={{ textDecoration: 'none', color: 'white' }}>sign in</Link></StyledButton>\r\n                            &nbsp;\r\n                        <StyledButton onClick={onSubmit}>login</StyledButton>\r\n                </div>\r\n                <span className=\"findpassword\"><Link to=\"/findpassword\" style={{ textDecoration: 'none', color: 'gray' }}>find password</Link></span>\r\n            </AdminLoginArea>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default withRouter(AdminLoginForm);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport AdminLoginForm from '../components/auth/AdminLoginForm';\r\nimport Header from '../components/common/Header';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n/* 화면 전체를 채움 */\r\nconst AdminLoginPageBlock = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n`;\r\n\r\nconst AdminLoginPage = ({ history }) => {\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>어드민 로그인 - INFO WARGAME</title>\r\n            </Helmet>\r\n            <AdminLoginPageBlock>\r\n                <Header />\r\n                <AdminLoginForm history={history} />\r\n            </AdminLoginPageBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdminLoginPage;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'findpassword/CHANGE_FIELD';\r\nconst INITIALIZE = 'findpassword/INITIALIZE';\r\nconst FINDPASSWORD_POST = 'findpassword/FINDPASSWORD_POST';\r\nconst FINDPASSWORD_POST_SUCCESS = 'findpassword/FINDPASSWORD_POST_SUCCESS';\r\nconst FINDPASSWORD_POST_FAILURE = 'findpassword/FINDPASSWORD_POST_FAILURE';\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({ key, value }));\r\nexport const findpasswordPost = createAction(FINDPASSWORD_POST, ({ id, email }) => ({ id, email }));\r\n\r\n// 사가 생성\r\nconst findpasswordPostSaga = createRequestSaga(FINDPASSWORD_POST, authAPI.findpassword);\r\n\r\nexport function* findpasswordpostSaga() {\r\n    yield takeLatest(FINDPASSWORD_POST, findpasswordPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    id: '',\r\n    email: '',\r\n    findpassword: null,\r\n    findpasswordError: null,\r\n};\r\n\r\nconst findpassword = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 값을 업데이트\r\n        }),\r\n        // 비밀번호 찾기 성공\r\n        [FINDPASSWORD_POST_SUCCESS]: (state, { payload: findpassword }) => ({\r\n            ...state,\r\n            findpassword,\r\n            findpasswordError: null,\r\n        }),\r\n        // 비밀번호 찾기 실패\r\n        [FINDPASSWORD_POST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            findpasswordError: error,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default findpassword;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FindPasswordBox = styled.div`\r\nwidth: 80%;\r\nmargin-left: -10px;\r\nheight: 100%;\r\nmargin-bottom: -0px;\r\nbackground: #00000;\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n\r\nspan {\r\n    font-size: 60px;\r\n    color: white;\r\n    margin-top: 25px;\r\n}\r\n\r\n/* 브라우저 크기에 따라 가로 크기 변경 */\r\n@media (max-width: 1024px) {\r\n    width: 100%;\r\n}\r\n@media (max-width: 768px) {\r\n    width: 100%;\r\n}\r\n\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 100%;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n\r\nfont-family: 'Do Hyeon', sans-serif;\r\ncolor: white;  \r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 600px;\r\n    height: 52px;\r\n    left: 642px;\r\n    top: 420px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    text-align: center;\r\n    color: white;\r\n\r\n    font-family: 'Do Hyeon', sans-serif;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\nfont-size: 2rem;\r\nborder: 2px solid #FFFFFF;\r\nbox-sizing: border-box;\r\nwidth: 299.5px;\r\nheight: 52px;\r\nleft: 642px;\r\ntop: 420px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\ncursor: pointer;\r\nfont-family: 'Do Hyeon', sans-serif;\r\n`;\r\n\r\nconst FindPasswordItem = ({ id, email, onChangeField, onSubmit }) => {\r\n\r\n    const onChange = e => {\r\n        const { name } = e.target;\r\n        onChangeField({ key: name, value: e.target.value });\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <FindPasswordBox>\r\n                <StyledInput name=\"id\" onChange={onChange} value={id} placeholder=\" 아이디를 입력하세요.\"></StyledInput>\r\n                <StyledInput name=\"email\" onChange={onChange} value={email} placeholder=\" 이메일을 입력하세요.\" style={{ marginTop: '30px' }}></StyledInput>\r\n                <StyledButton onClick={onSubmit} style={{ marginTop: '50px' }}>제출</StyledButton>\r\n            </FindPasswordBox>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FindPasswordItem;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initialize, findpasswordPost } from '../modules/findpassword';\r\nimport FindPasswordItem from '../components/etc/FindPasswordItem';\r\n\r\nconst LoginContainer = ({ history }) => {\r\n    const dispatch = useDispatch();\r\n    const { id, email, findpassword, } = useSelector(({ findpassword }) => ({\r\n        id: findpassword.id,\r\n        email: findpassword.email,\r\n        findpassword: findpassword.findpassword,\r\n    }));\r\n\r\n\r\n    // 인풋 값 업데이트\r\n    const onChange = useCallback(payload => dispatch(changeField(payload)), [dispatch]);\r\n\r\n    // 비밀번호 찾기 요청\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch(findpasswordPost({ id, email }));\r\n    };\r\n\r\n    // 컴포넌트가 맨 처음 렌더링 될 때 인풋 초기화\r\n    useEffect(() => {\r\n        dispatch(initialize());\r\n    }, [dispatch]);\r\n\r\n    // 컴포넌트가 언마운트될 때 인풋 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize());\r\n        }\r\n    }, [dispatch]);\r\n\r\n    // 비밀번호 인증 성공 여부 검사\r\n    useEffect(() => {\r\n        if (findpassword) {\r\n            if (findpassword.check === true)\r\n                alert(\"바뀐 비밀번호가 이메일로 전송되었습니다.\");\r\n            history.push('/login');\r\n        }\r\n        if (findpassword) {\r\n            if (findpassword.check === false)\r\n                alert(\"바뀐 비밀번호 전송 실패\");\r\n        }\r\n    }, [history, findpassword]);\r\n\r\n\r\n    return <FindPasswordItem\r\n        onChangeField={onChange}\r\n        id={id}\r\n        email={email}\r\n        onSubmit={onSubmit}\r\n    />;\r\n};\r\n\r\n\r\nexport default withRouter(LoginContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../components/common/Header';\r\nimport FindPasswordContainer from '../containers/FindPasswordContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n/* 화면 전체를 채움 */\r\nconst FindPasswordPageBlock = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n`;\r\n\r\n\r\n\r\nconst FindPasswordPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>비밀번호찾기 - INFO WARGAME</title>\r\n            </Helmet>\r\n            <FindPasswordPageBlock>\r\n                <Header />\r\n                <FindPasswordContainer />\r\n            </FindPasswordPageBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FindPasswordPage;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as adminAPI from '../lib/api/admin';\r\n\r\nconst CHANGE_FIELD = 'makequiz/CHANGE_FIELD';\r\nconst INITIALIZE = 'makequiz/INITIALIZE';\r\nconst MAKE_QUIZ_POST = 'makequiz/MAKE_QUIZ_POST';\r\nconst MAKE_QUIZ_POST_SUCCESS = 'makequiz/MAKE_QUIZ_POST_SUCCESS';\r\nconst MAKE_QUIZ_POST_FAILURE = 'makequiz/MAKE_QUIZ_POST_FAILURE';\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({ key, value }));\r\nexport const makequizPost = createAction(MAKE_QUIZ_POST, ({ category, contents, point, quizname, flag, token }) => ({ category, contents, point, quizname, flag, token }));\r\n\r\n// 사가 생성\r\nconst makequizPostSaga = createRequestSaga(MAKE_QUIZ_POST, adminAPI.makequiz);\r\n\r\n// 사가 통합\r\nexport function* makequizpostSaga() {\r\n    yield takeLatest(MAKE_QUIZ_POST, makequizPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    category: '1',\r\n    point: '',\r\n    quizname: '',\r\n    contents: '',\r\n    flag: '',\r\n    filetoadd: null,\r\n    makequiz: null,\r\n    error: null,\r\n};\r\n\r\nconst makequiz = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 key 값을 업데이트\r\n        }),\r\n        [MAKE_QUIZ_POST_SUCCESS]: (state, { payload: makequiz }) => ({\r\n            ...state,\r\n            makequiz,\r\n        }),\r\n        [MAKE_QUIZ_POST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default makequiz;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst MakeQuizArea = styled.div`\r\nwidth: 80%;\r\nheight: 100%;\r\nmargin-top: 70px;\r\nborder-radius: 5px;\r\nborder: none;\r\nh1 {\r\n    color: white;\r\n}\r\n\r\nfont-family: 'Do Hyeon', sans-serif;\r\ncolor: white;  \r\n`;\r\n\r\nconst MakeQuizContent = styled.textarea`\r\nwidth: 80%;\r\nheight: 50%;\r\nborder: none;\r\nborder-radius: 5px;\r\nbackground: black;\r\ncolor: white;\r\nresize: none;\r\nmargin-left: 100px;\r\nmargin-top: 50px;\r\nfont-size: 25px;\r\nborder: 1px solid white;\r\n`;\r\n\r\nconst InputArea = styled.div`\r\nwidth: 100%;\r\nborder: none;\r\npadding-bottom: 10px;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n    position: relative;\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 250px;\r\n    height: 50px;\r\n    left: 100px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    text-align: center;\r\n    color: white;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n    font-size: 2rem;\r\n    border: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 965px;\r\n    height: 60px;\r\n    left: 642px;\r\n    top: 420px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    text-align: justify;\r\n    color: white;\r\n`;\r\n\r\nconst StyledShortInput = styled.input`\r\n    font-size: 2rem;\r\n    border: none;\r\n    outline: none;\r\n    border-bottom: 2px solid #FFFFFF;\r\n    box-sizing: border-box;\r\n    width: 20%;\r\n    height: 52px;\r\n    left: 542px;\r\n    top: 420px;\r\n    background: #000000;\r\n    border-radius: 3px;\r\n    color: white;\r\n    text-align: justify;\r\n    margin-left: 110px;\r\n    margin-top: 30px;\r\n`;\r\n\r\n\r\nconst StyledButton = styled.button`\r\nposition: absolute;\r\nfont-size: 2rem;\r\nborder-right: 2px solid #FFFFFF;\r\nborder-top: 2px solid #FFFFFF;\r\nborder-bottom: 2px solid #FFFFFF;\r\nborder-left: 2px solid #FFFFFF;\r\noutline: none;\r\nbox-sizing: border-box;\r\nwidth: 130px;\r\nheight: 60px;\r\nright: 240px;\r\nbackground: #000000;\r\nborder-radius: 3px;\r\ntext-align: center;\r\ncolor: white;\r\n&:hover {\r\n    cursor: pointer;\r\n}\r\n`;\r\n\r\n\r\nconst MakeQuizItem = ({ category, point, quizname, contents, makequiz, onChangeField, ChangeFile, onSubmit, fileDelete, flag }) => {\r\n\r\n\r\n    const onChangeFile = (e) => {\r\n        ChangeFile(e.target.files[0]);\r\n    };\r\n\r\n    const onChange = e => {\r\n        const { name } = e.target;\r\n        onChangeField({ key: name, value: e.target.value });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <MakeQuizArea>\r\n                <p style={{ fontSize: '18px', color: 'white', marginLeft: '110px' }}>*주의사항* : 파일을 첨부할 때는 꼭 zip 파일로 압축해서 넣어야 합니다. </p>\r\n                <StyledSelect name=\"category\" onChange={onChange} value={category}>\r\n                    <option value=\"1\">Cryptography</option>\r\n                    <option value=\"2\">Forensics</option>\r\n                    <option value=\"3\">MISC</option>\r\n                    <option value=\"4\">Networking</option>\r\n                    <option value=\"5\">Pwnable</option>\r\n                    <option value=\"6\">Reverse Engineering</option>\r\n                    <option value=\"7\">Webhacking</option>\r\n                </StyledSelect>\r\n                <StyledShortInput name=\"point\" value={point} placeholder=\"점수\" onChange={onChange}></StyledShortInput>\r\n                <br />\r\n                <br />\r\n                <StyledInput name=\"quizname\" placeholder=\"문제제목\" value={quizname} onChange={onChange} style={{ border: 'none', outline: 'none', borderBottom: '2px solid #FFFFFF', boxSizing: 'border-box', marginLeft: '100px', width: '80%', }}></StyledInput>\r\n                <MakeQuizContent name=\"contents\" value={contents} onChange={onChange}>\r\n                    문제 내용\r\n                </MakeQuizContent>\r\n                <InputArea>\r\n                    <StyledInput name=\"file\" type=\"file\" onChange={onChangeFile} style={{ marginLeft: '100px', width: '77.5%' }}></StyledInput>\r\n                </InputArea>\r\n                <StyledInput name=\"flag\" type=\"text\" value={flag} onChange={onChange} placeholder=\"insert flag\" style={{ marginLeft: '100px', width: '70%' }}></StyledInput>\r\n                <StyledButton style={{ marginRight: '86px' }} onClick={onSubmit}>만들기</StyledButton>\r\n            </MakeQuizArea>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MakeQuizItem;","import React, { useEffect, useState, useCallback, } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { initialize, changeField, makequizPost } from '../modules/makequiz';\r\nimport { deletefilePost } from '../modules/deletefile';\r\nimport MakeQuizItem from '../components/Quiz/MakeQuizItem';\r\nimport client from '../lib/api/client';\r\nimport { getCookie } from '../lib/cookie';\r\n\r\nconst MakeQuizContainer = ({ history }) => {\r\n    const [uploadFileData, setUploadFileData] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n    const { category, point, quizname, contents, makequiz, error, file, flag } = useSelector(({ makequiz, uploadfile, deletefile, }) => ({\r\n        category: makequiz.category,\r\n        point: makequiz.point,\r\n        quizname: makequiz.quizname,\r\n        flag: makequiz.flag,\r\n        contents: makequiz.contents,\r\n        makequiz: makequiz.makequiz,\r\n        error: makequiz.error,\r\n        file: uploadfile.file,\r\n    }));\r\n\r\n    // 인풋 값 업데이트\r\n    const onChange = useCallback(payload => dispatch(changeField(payload)), [dispatch]);\r\n\r\n    // 컴포넌트가 맨 처음 렌더링 될 때 인풋 초기화\r\n    useEffect(() => {\r\n        dispatch(initialize());\r\n    }, [dispatch]);\r\n\r\n    // 컴포넌트가 언마운트될 때 인풋 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize());\r\n        }\r\n    }, [dispatch]);\r\n\r\n    // 파일 추가 API 요청\r\n    const fileAdd = async e => {\r\n        if (!uploadFileData) return;\r\n        const token = getCookie(\"user\");\r\n        const formdata = new FormData();\r\n        try {\r\n            formdata.append(\"quizname\", quizname);\r\n            formdata.append(\"filetoadd\", uploadFileData);\r\n            await client.post(`/api/admin/file`, formdata, { headers: { \"Authentication\": token } })\r\n        } catch (err) {\r\n            alert(\"에러\");\r\n        }\r\n    };\r\n\r\n    // 파일 삭제 api 요청\r\n    const fileDelete = e => {\r\n        const users = localStorage.getItem(\"users\") ? localStorage.getItem('user') : null;\r\n        const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n        const token = getCookie(\"user\");\r\n        if (admin) {\r\n            dispatch(deletefilePost({ quizname, token }));\r\n            setUploadFileData(null);\r\n        }\r\n        if (users) {\r\n            alert(\"어드민만 사용 가능한 기능입니다.\");\r\n        }\r\n    };\r\n\r\n    // 문제 만들기 api 요청\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const users = localStorage.getItem(\"users\") ? localStorage.getItem('user') : null;\r\n        const admin = localStorage.getItem(\"admin\") ? localStorage.getItem('admin') : null;\r\n        const token = getCookie(\"user\");\r\n        if (admin) {\r\n            dispatch(makequizPost({ category, contents, point, quizname, flag, token }));\r\n            fileAdd(); // file 추가 api 요청\r\n        }\r\n        if (users) {\r\n            alert(\"어드민만 사용 가능한 기능입니다.\");\r\n        }\r\n    };\r\n\r\n    // 문제 만들기 성공/실패 확인\r\n    useEffect(() => {\r\n        if (makequiz) {\r\n            if (makequiz) {\r\n                alert(\"문제 만들기 완료\");\r\n                history.push('/challenges');\r\n            }\r\n            if (error) {\r\n                alert(\"문제 만들기 실패\");\r\n            }\r\n        }\r\n    }, [history, makequiz, error]);\r\n\r\n\r\n    return (\r\n        <MakeQuizItem\r\n            onChangeField={onChange}\r\n            ChangeFile={setUploadFileData}\r\n            onSubmit={onSubmit}\r\n            category={category}\r\n            point={point}\r\n            quizname={quizname}\r\n            contents={contents}\r\n            makequiz={makequiz}\r\n            file={file}\r\n            fileAdd={fileAdd}\r\n            fileDelete={fileDelete}\r\n            flag={flag}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(MakeQuizContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../components/common/Header';\r\nimport MakeQuizContainer from '../containers/MakeQuizContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n/* 화면 전체를 채움 */\r\nconst MakeQuizPageBlock = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\ntop: 0;\r\nbottom: 0;\r\nright: 0;\r\nbackground: #000000;\r\n/* flex로 내부 내용 중앙 정렬 */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 160%;\r\n`;\r\n\r\n\r\n\r\nconst MakeQuizPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>퀴즈 만들기 - INFO WARGAME</title>\r\n            </Helmet>\r\n            <MakeQuizPageBlock>\r\n                <Header />\r\n                <MakeQuizContainer />\r\n            </MakeQuizPageBlock>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MakeQuizPage;","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport { Route } from 'react-router-dom';\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegisterPage from './pages/RegisterPage';\r\nimport ScoreBoardPage from './pages/ScoreBoardPage';\r\nimport NotificationPage from './pages/NotificationPage';\r\nimport ChallengesPage from './pages/ChallengesPage';\r\nimport LoginAfterPage from './pages/LoginAfterPage';\r\nimport UserPage from './pages/UserPage';\r\nimport ShowQuiz from './pages/ShowQuiz';\r\nimport AdminRegisterPage from './pages/AdminRegisterPage';\r\nimport AdminLoginPage from './pages/AdminLoginPage';\r\nimport FindPasswordPage from './pages/FindPasswordPage';\r\nimport MakeQuizPage from './pages/MakeQuizPage';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  useEffect(() => {\r\n    console.log('%c잠깐만!!', 'color: red; font-size: 55px; font-weight: bold;');\r\n    console.log('%c개발자 도구 기능은 쓰지 마세요 ^^. 누군가 CTF INFO 사이트를 뜯어보려 하거나 해킹을 하려고 하는 행동은 절대로 안됩니다.', 'font-size: 20px;');\r\n    console.log('%c만약 이 경고를 무시하시고 뭣 같은 짓을 하시면 고소미를 드실 수 있으니 주의해 주세요.', 'font-size: 20px;');\r\n    console.log('%c-정보보안 동아리 INFO-', 'font-size: 20px;');\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>INFO WARGAME</title>\r\n      </Helmet>\r\n      <Route component={LoginPage} path=\"/\" exact/>\r\n      <Route component={LoginAfterPage} path=\"/loginafter\" />\r\n      <Route component={RegisterPage} path=\"/register\" />\r\n      <Route component={ScoreBoardPage} path=\"/scoreboard\" />\r\n      <Route component={NotificationPage} path=\"/notification\" />\r\n      <Route component={ChallengesPage} path=\"/challenges\" />\r\n      <Route component={UserPage} path=\"/user\" />\r\n      <Route component={ShowQuiz} path=\"/quiz/:category/:num\" />\r\n      <Route component={AdminRegisterPage} path=\"/adminregister\" />\r\n      <Route component={AdminLoginPage} path=\"/adminlogin\" />\r\n      <Route component={FindPasswordPage} path=\"/findpassword\" />\r\n      <Route component={MakeQuizPage} path=\"/makequiz\" />\r\n    </>\r\n  );\r\n}\r\n\r\n// <Route component={LoginPage} path={[\"/\", \"/notification\"]} exact />\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as adminAPI from '../lib/api/admin';\r\n\r\nconst CHANGE_FIELD = 'adminlogin/CHANGE_FIELD';\r\nconst INITIALIZE = 'adminlogin/INITIALIZE';\r\nconst ADMIN_LOGIN_POST = 'adminlogin/ADMIN_LOGIN_POST';\r\nconst ADMIN_LOGIN_SUCCESS = 'adminlogin/ADMIN_LOGIN_SUCCESS';\r\nconst ADMIN_LOGIN_FAILURE = 'adminlogin/ADMIN_LOGIN_FAILURE';\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({ key, value }));\r\nexport const adminloginPost = createAction(ADMIN_LOGIN_POST, ({ id, password }) => ({ id, password }));\r\n\r\n// 사가 생성\r\nconst adminloginPostSaga = createRequestSaga(ADMIN_LOGIN_POST, adminAPI.adminlogin);\r\n\r\nexport function* adminloginpostSaga() {\r\n    yield takeLatest(ADMIN_LOGIN_POST, adminloginPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    id: '',\r\n    password: '',\r\n    adminlogin: '',\r\n    error: null,\r\n};\r\n\r\nconst adminlogin = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 값을 업데이트\r\n        }),\r\n        [ADMIN_LOGIN_SUCCESS]: (state, { payload: adminlogin }) => ({\r\n            ...state,\r\n            adminlogin,\r\n        }),\r\n        [ADMIN_LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default adminlogin;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as adminAPI from '../lib/api/admin';\r\n\r\nconst CHANGE_FIELD = 'uploadfile/CHANGE_FIELD';\r\nconst UPLOAD_FILE_POST = 'uploadfile/UPLOAD_FILE_POST';\r\nconst UPLOAD_FILE_POST_SUCCESS = 'uploadfile/UPLOAD_FILE_POST_SUCCESS';\r\nconst UPLOAD_FILE_POST_FAILURE = 'uploadfile/UPLOAD_FILE_POST_FAILURE';\r\n\r\nexport const changeInput = createAction(CHANGE_FIELD, ({ key, value }) => ({ key, value }));\r\nexport const uploadfilePost = createAction(UPLOAD_FILE_POST, ({ quizname, file, token }) => ({ quizname, file, token }));\r\n\r\n// 사가 생성\r\nconst uploadfilePostSaga = createRequestSaga(UPLOAD_FILE_POST, adminAPI.uploadfile);\r\n\r\n// 사가 통합\r\nexport function* uploadfilepostSaga() {\r\n    yield takeLatest(UPLOAD_FILE_POST, uploadfilePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    quizname: '',\r\n    file: '',\r\n    uploadfile: null,\r\n    error: null,\r\n};\r\n\r\nconst uploadfile = handleActions(\r\n    {\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 key 값을 업데이트\r\n        }),\r\n        [UPLOAD_FILE_POST_SUCCESS]: (state, { payload: uploadfile }) => ({\r\n            ...state,\r\n            uploadfile,\r\n        }),\r\n        [UPLOAD_FILE_POST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default uploadfile;\r\n","// 리덕스코드로 파일다운로드 처리가 잘 되지 않아 fetch로 수정, 다운로드가 되므로 리덕스 코드 미사용 결정\r\n\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as quizAPI from '../lib/api/quiz';\r\n\r\nconst INITIALIZE = 'downloadfile/INITIALIZE';\r\nconst DOWNLOAD_FILE = 'downloadfile/DOWNLOAD_FILE';\r\nconst DOWNLOAD_FILE_SUCCESS = 'downloadfile/DOWNLOAD_FILE_SUCCESS';\r\nconst DOWNLOAD_FILE_FAILURE = 'downloadfile/DOWNLOAD_FILE_FAILURE';\r\n\r\nexport const downloadinitialize = createAction(INITIALIZE);\r\nexport const downloadfilePost = createAction(DOWNLOAD_FILE, quiz_code => quiz_code);\r\n\r\n// 사가 생성\r\nconst downloadfilePostsaga = createRequestSaga(DOWNLOAD_FILE, quizAPI.downloadfile);\r\n\r\n// 사가 통합\r\nexport function* downloadfilepostSaga() {\r\n    yield takeLatest(DOWNLOAD_FILE, downloadfilePostsaga);\r\n}\r\n\r\nconst initialState = {\r\n    downloadfile: null,\r\n    error: null,\r\n};\r\n\r\n\r\nconst downloadfile = handleActions(\r\n    {\r\n\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n\r\n        [DOWNLOAD_FILE_SUCCESS]: (state, { payload: downloadfile }) => ({\r\n            ...state,\r\n            downloadfile,\r\n        }),\r\n        [DOWNLOAD_FILE_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default downloadfile;","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport register, { registerpostSaga } from './register';\r\nimport login, { loginpostSaga } from './login';\r\nimport adminlogin, { adminloginpostSaga } from './adminlogin';\r\nimport adminregister, { adminregistersaga } from './adminregister';\r\nimport loading from './loading';\r\nimport idcheck, { idcheckSaga } from './idcheck';\r\nimport sendemail, { sendemailSaga } from './sendemail';\r\nimport getemail, { getemailSaga } from './getemail';\r\nimport findpassword, { findpasswordpostSaga } from './findpassword';\r\nimport mypages, { mypageSaga } from './mypages';\r\nimport mypagemodified, { mypagemodifiedSaga } from './mypagemodified';\r\nimport searchuser, { searchSaga } from './searchuser';\r\nimport makequiz, { makequizpostSaga } from './makequiz';\r\nimport uploadfile, { uploadfilepostSaga } from './uploadfile';\r\nimport showquizlist, { showquizlistpostSaga } from './showquizlist';\r\nimport deletefile, { deletefileSaga } from './deletefile';\r\nimport rank, { ranksaga } from './rank';\r\nimport loadquiz, { loadquizpostSaga } from './loadquiz';\r\nimport deletequiz, { deletequizSaga } from './deletequiz';\r\nimport downloadfile, { downloadfilepostSaga } from './downloadfile';\r\nimport checkanswer, { checkanswerSaga } from './checkanswer';\r\nimport quiz, { quizpostSaga } from './quiz';\r\n\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({ register, login, loading, idcheck, sendemail, getemail, adminlogin, adminregister, findpassword, mypages, mypagemodified, searchuser, makequiz, uploadfile, showquizlist, deletefile, rank, loadquiz, deletequiz, downloadfile, checkanswer, quiz });\r\n\r\nexport function* rootSaga() {\r\n    yield all([idcheckSaga(), sendemailSaga(), getemailSaga(), registerpostSaga(), loginpostSaga(), findpasswordpostSaga(), mypageSaga(), mypagemodifiedSaga(), searchSaga(), adminregistersaga(), adminloginpostSaga(), makequizpostSaga(), uploadfilepostSaga(), showquizlistpostSaga(), deletefileSaga(), ranksaga(), loadquizpostSaga(), deletequizSaga(), downloadfilepostSaga(), checkanswerSaga(), quizpostSaga()]);\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer, { rootSaga } from './modules';\r\nimport { loginPost } from './modules/login';\r\nimport { HelmetProvider } from 'react-helmet-async';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nfunction loadToken() {\r\n  try {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (!user) return; // 토큰이 없다면 아무것도 하지 않음\r\n    store.dispatch(loginPost({ user }));\r\n  } catch (e) {\r\n    console.log('localStorage is not working.');\r\n  }\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);\r\nloadToken();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <HelmetProvider>\r\n          <App />\r\n        </HelmetProvider>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}